#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ v2.0
"""

import asyncio
import logging
import random
from datetime import datetime, timedelta

import pytest
import pytest_asyncio

from database.database import init_db, create_user, create_blogger, get_user, get_blogger
from database.models import UserRole, Platform, BlogCategory, SubscriptionStatus
from utils.google_sheets import sheets_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


@pytest_asyncio.fixture
async def user_and_blogger():
    """Create and return a test user and blogger."""
    user, blogger = await test_database_migration()
    return user, blogger

@pytest.mark.asyncio
async def test_database_migration():
    """–¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    await init_db()
    logger.info("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π telegram_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    test_telegram_id = random.randint(100000000, 999999999)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    existing_user = await get_user(test_telegram_id)
    if existing_user:
        logger.info(f"‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {test_telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ")
        user = existing_user
    else:
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = await create_user(
            telegram_id=test_telegram_id,
            username="test_user",
            first_name="Test",
            last_name="User",
            roles=[UserRole.SELLER]
        )
        logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.username}")
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    logger.info(f"üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:")
    logger.info(f"   ID: {user.id}")
    logger.info(f"   Telegram ID: {user.telegram_id}")
    logger.info(f"   Username: {user.username}")
    logger.info(f"   –†–æ–ª–∏: {[r.value for r in user.roles]}")
    
    if user.id is None:
        logger.error("‚ùå User ID —Ä–∞–≤–Ω–æ None! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –±–ª–æ–≥–µ—Ä–∞.")
        return None, None
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –±–ª–æ–≥–µ—Ä–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞–º–∏
    blogger = await create_blogger(
        seller_id=user.id,
        name=f"Test Blogger {random.randint(1000, 9999)}",
        url="https://instagram.com/testblogger",
        platforms=[Platform.INSTAGRAM, Platform.YOUTUBE],
        categories=[BlogCategory.LIFESTYLE, BlogCategory.BEAUTY],
        audience_13_17_percent=10,
        audience_18_24_percent=40,
        audience_25_35_percent=35,
        audience_35_plus_percent=15,
        female_percent=70,
        male_percent=30,
        price_stories=10000,
        price_reels=50000,
        stats_images=["path/to/screenshot1.png", "path/to/screenshot2.png"],
        has_reviews=True,
        description="–¢–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–≥–µ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–π"
    )
    logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π –±–ª–æ–≥–µ—Ä: {blogger.name}")
    logger.info(f"   –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {blogger.get_platforms_summary()}")
    logger.info(f"   –í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: {blogger.get_age_categories_summary()}")

    assert len(blogger.stats_images) == 2
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    age_valid = blogger.validate_age_percentages()
    logger.info(f"   –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {'‚úÖ' if age_valid else '‚ùå'}")
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ –ø–æ–ª—É
    gender_valid = blogger.validate_gender_percentages()
    logger.info(f"   –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ –ø–æ–ª—É: {'‚úÖ' if gender_valid else '‚ùå'}")
    
    return user, blogger

@pytest.mark.asyncio
async def test_google_sheets_integration(user_and_blogger):
    user, blogger = user_and_blogger
    """–¢–µ—Å—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Sheets"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Sheets...")
    
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Google Sheets
        success = await sheets_manager.initialize()
        if success:
            logger.info("‚úÖ Google Sheets –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –¥–µ–π—Å—Ç–≤–∏—è —Å –±–ª–æ–≥–µ—Ä–æ–º
            user_data = {
                'username': user.username,
                'roles': [r.value for r in user.roles],
                'subscription_start_date': datetime.now(),
                'subscription_end_date': datetime.now() + timedelta(days=30)
            }
            
            blogger_data = {
                'name': blogger.name,
                'url': blogger.url,
                'platforms': [p.value for p in blogger.platforms],
                'audience_13_17_percent': blogger.audience_13_17_percent,
                'audience_18_24_percent': blogger.audience_18_24_percent,
                'audience_25_35_percent': blogger.audience_25_35_percent,
                'audience_35_plus_percent': blogger.audience_35_plus_percent
            }
            
            sheets_success = await sheets_manager.add_blogger_action(
                user_data, blogger_data, "test"
            )
            logger.info(f"   –ó–∞–ø–∏—Å—å –≤ Google Sheets: {'‚úÖ' if sheets_success else '‚ùå'}")
            
            # –¢–µ—Å—Ç –∑–∞–ø–∏—Å–∏ –∂–∞–ª–æ–±—ã
            complaint_success = await sheets_manager.add_complaint(
                blogger_id=blogger.id,
                blogger_name=blogger.name,
                user_id=user.id,
                username=user.username,
                reason="–¢–µ—Å—Ç–æ–≤–∞—è –∂–∞–ª–æ–±–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞"
            )
            logger.info(f"   –ó–∞–ø–∏—Å—å –∂–∞–ª–æ–±—ã –≤ Google Sheets: {'‚úÖ' if complaint_success else '‚ùå'}")
            
        else:
            logger.warning("‚ö†Ô∏è Google Sheets –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç)")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ Google Sheets: {e}")

@pytest.mark.asyncio
async def test_subscription_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫...")
    
    # –¢–µ—Å—Ç —Ä–∞—Å—á–µ—Ç–∞ –¥–∞—Ç –ø–æ–¥–ø–∏—Å–∫–∏
    start_date = datetime.now()
    
    # 1 –º–µ—Å—è—Ü
    end_date_1m = start_date + timedelta(days=30)
    logger.info(f"   –ü–æ–¥–ø–∏—Å–∫–∞ 1 –º–µ—Å—è—Ü: {start_date.strftime('%d.%m.%Y')} - {end_date_1m.strftime('%d.%m.%Y')}")
    
    # 3 –º–µ—Å—è—Ü–∞
    end_date_3m = start_date + timedelta(days=90)
    logger.info(f"   –ü–æ–¥–ø–∏—Å–∫–∞ 3 –º–µ—Å—è—Ü–∞: {start_date.strftime('%d.%m.%Y')} - {end_date_3m.strftime('%d.%m.%Y')}")
    
    # 12 –º–µ—Å—è—Ü–µ–≤
    end_date_12m = start_date + timedelta(days=365)
    logger.info(f"   –ü–æ–¥–ø–∏—Å–∫–∞ 12 –º–µ—Å—è—Ü–µ–≤: {start_date.strftime('%d.%m.%Y')} - {end_date_12m.strftime('%d.%m.%Y')}")
    
    logger.info("‚úÖ –õ–æ–≥–∏–∫–∞ –ø–æ–¥–ø–∏—Å–æ–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

@pytest.mark.asyncio
async def test_role_permissions():
    """–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π"""
    logger.info("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π...")
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ telegram_id –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    seller_telegram_id = random.randint(100000000, 999999999)
    buyer_telegram_id = random.randint(100000000, 999999999)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞
    existing_seller = await get_user(seller_telegram_id)
    if existing_seller:
        seller = existing_seller
    else:
        seller = await create_user(
            telegram_id=seller_telegram_id,
            username="test_seller",
            roles=[UserRole.SELLER]
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–∫—É–ø—â–∏–∫–∞
    existing_buyer = await get_user(buyer_telegram_id)
    if existing_buyer:
        buyer = existing_buyer
    else:
        buyer = await create_user(
            telegram_id=buyer_telegram_id,
            username="test_buyer",
            roles=[UserRole.BUYER]
        )
    
    logger.info(f"   –ü—Ä–æ–¥–∞–∂–Ω–∏–∫: {seller.username} - {[r.value for r in seller.roles]}")
    logger.info(f"   –ó–∞–∫—É–ø—â–∏–∫: {buyer.username} - {[r.value for r in buyer.roles]}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞
    seller_can_complain = seller.has_role(UserRole.BUYER)
    buyer_can_complain = buyer.has_role(UserRole.BUYER)
    
    logger.info(f"   –ü—Ä–æ–¥–∞–∂–Ω–∏–∫ –º–æ–∂–µ—Ç –∂–∞–ª–æ–≤–∞—Ç—å—Å—è: {'‚ùå' if seller_can_complain else '‚úÖ'}")
    logger.info(f"   –ó–∞–∫—É–ø—â–∏–∫ –º–æ–∂–µ—Ç –∂–∞–ª–æ–≤–∞—Ç—å—Å—è: {'‚úÖ' if buyer_can_complain else '‚ùå'}")
    
    logger.info("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–æ–ª–µ–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logger.info("üöÄ –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞ v2.0")
    logger.info("=" * 50)
    
    try:
        # –¢–µ—Å—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –ë–î
        user, blogger = await test_database_migration()
        
        # –¢–µ—Å—Ç Google Sheets
        await test_google_sheets_integration((user, blogger))
        
        # –¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
        await test_subscription_logic()
        
        # –¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–æ–ª–µ–π
        await test_role_permissions()
        
        logger.info("=" * 50)
        logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        logger.info("‚úÖ –ë–æ—Ç v2.0 –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
