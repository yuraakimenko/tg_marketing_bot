import asyncio
import logging
import os
import signal
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode

from database.database import init_db
from handlers import common, seller, buyer, subscription

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
env_loaded = load_dotenv()
print(f"üîß .env —Ñ–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {env_loaded}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ .env —Ñ–∞–π–ª–∞
env_file_path = os.path.join(os.getcwd(), '.env')
env_exists = os.path.exists(env_file_path)
print(f"üîß .env —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {env_exists}")
if env_exists:
    print(f"üîß –ü—É—Ç—å –∫ .env: {env_file_path}")
else:
    print(f"üîß –¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    print(f"üîß –§–∞–π–ª—ã –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {os.listdir('.')}")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
print("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===")
print(f"–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {list(os.environ.keys())}")
logger.info("=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–ï–†–ï–ú–ï–ù–ù–´–• –û–ö–†–£–ñ–ï–ù–ò–Ø ===")
logger.info(f"–í—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ: {list(os.environ.keys())}")

# –ò—â–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–æ—Ç–æ–º
bot_vars = {k: v for k, v in os.environ.items() if 'BOT' in k.upper() or 'TOKEN' in k.upper()}
print(f"–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å BOT/TOKEN: {bot_vars}")
logger.info(f"–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å BOT/TOKEN: {bot_vars}")

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ - –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã
BOT_TOKEN = os.getenv('BOT_TOKEN')
print(f"os.getenv('BOT_TOKEN'): {'–ù–∞–π–¥–µ–Ω' if BOT_TOKEN else '–ù–ï –ù–ê–ô–î–ï–ù'}")
logger.info(f"os.getenv('BOT_TOKEN'): {'–ù–∞–π–¥–µ–Ω' if BOT_TOKEN else '–ù–ï –ù–ê–ô–î–ï–ù'}")

# –ü—Ä–æ–±—É–µ–º environ –Ω–∞–ø—Ä—è–º—É—é
BOT_TOKEN_DIRECT = os.environ.get('BOT_TOKEN')
print(f"os.environ.get('BOT_TOKEN'): {'–ù–∞–π–¥–µ–Ω' if BOT_TOKEN_DIRECT else '–ù–ï –ù–ê–ô–î–ï–ù'}")
logger.info(f"os.environ.get('BOT_TOKEN'): {'–ù–∞–π–¥–µ–Ω' if BOT_TOKEN_DIRECT else '–ù–ï –ù–ê–ô–î–ï–ù'}")

# –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π
if not BOT_TOKEN and not BOT_TOKEN_DIRECT:
    print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º!")
    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    for key in sorted(os.environ.keys()):
        print(f"  {key}")
    logger.error("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –æ–¥–Ω–∏–º —Å–ø–æ—Å–æ–±–æ–º!")
    logger.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
    for key in sorted(os.environ.keys()):
        logger.info(f"  {key}")
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
BOT_TOKEN = BOT_TOKEN or BOT_TOKEN_DIRECT

# –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ —Ç–æ–∫–µ–Ω–∞
logger.info(f"–¢–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω, –¥–ª–∏–Ω–∞: {len(BOT_TOKEN) if BOT_TOKEN else 0}")
if BOT_TOKEN:
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø—Ä–æ–±–µ–ª—ã –∏ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã
    logger.info(f"–ü–µ—Ä–≤—ã–µ 10 —Å–∏–º–≤–æ–ª–æ–≤: '{BOT_TOKEN[:10]}'")
    logger.info(f"–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å–∏–º–≤–æ–ª–æ–≤: '{BOT_TOKEN[-10:]}'")
    logger.info(f"–°–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ: {BOT_TOKEN != BOT_TOKEN.strip()}")
    
    # –û—á–∏—â–∞–µ–º —Ç–æ–∫–µ–Ω –æ—Ç –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –Ω–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤
    BOT_TOKEN = BOT_TOKEN.strip().replace('\n', '').replace('\r', '').replace('\t', '')
    logger.info(f"–ü–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏, –¥–ª–∏–Ω–∞: {len(BOT_TOKEN)}")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞
    if ':' not in BOT_TOKEN:
        logger.error("‚ùå –¢–æ–∫–µ–Ω –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç ':' - –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
    else:
        parts = BOT_TOKEN.split(':')
        logger.info(f"–¢–æ–∫–µ–Ω —Ä–∞–∑–¥–µ–ª–µ–Ω –Ω–∞ —á–∞—Å—Ç–∏: {len(parts[0])} —Å–∏–º–≤–æ–ª–æ–≤ –¥–æ ':' –∏ {len(parts[1])} –ø–æ—Å–ª–µ")
        if not parts[0].isdigit():
            logger.error(f"‚ùå –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å —Ç–æ–∫–µ–Ω–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º: '{parts[0]}'")
    
    # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –Ω–∞ –Ω–µ–≤–∏–¥–∏–º—ã–µ
    invisible_chars = []
    for i, char in enumerate(BOT_TOKEN):
        if not char.isprintable() and char not in [':']:
            invisible_chars.append(f"–ø–æ–∑–∏—Ü–∏—è {i}: –∫–æ–¥ {ord(char)}")
    
    if invisible_chars:
        logger.error(f"‚ùå –ù–∞–π–¥–µ–Ω—ã –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã: {invisible_chars}")
    else:
        logger.info("‚úÖ –ù–µ–≤–∏–¥–∏–º—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await init_db()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )
    dp = Dispatcher()
    
    # –§–ª–∞–≥ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    shutdown_event = asyncio.Event()
    
    def signal_handler(signum, frame):
        logger.info(f"–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞–±–æ—Ç—É...")
        shutdown_event.set()
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–∏–≥–Ω–∞–ª–æ–≤
    signal.signal(signal.SIGTERM, signal_handler)
    signal.signal(signal.SIGINT, signal_handler)
    
    # –û—á–∏—â–∞–µ–º webhook –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º polling
    logger.info("–û—á–∏—â–∞–µ–º webhook...")
    await bot.delete_webhook(drop_pending_updates=True)
    logger.info("Webhook –æ—á–∏—â–µ–Ω")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    dp.include_router(common.router)
    dp.include_router(seller.router)
    dp.include_router(buyer.router)
    dp.include_router(subscription.router)
    
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    
    try:
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º timeout
        logger.info("–ó–∞–ø—É—Å–∫–∞–µ–º polling...")
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á—É –¥–ª—è polling
        polling_task = asyncio.create_task(
            dp.start_polling(bot, timeout=60, drop_pending_updates=True)
        )
        
        # –ñ–¥–µ–º –ª–∏–±–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è polling, –ª–∏–±–æ —Å–∏–≥–Ω–∞–ª–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
        done, pending = await asyncio.wait(
            [polling_task, asyncio.create_task(shutdown_event.wait())],
            return_when=asyncio.FIRST_COMPLETED
        )
        
        # –û—Ç–º–µ–Ω—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
        for task in pending:
            task.cancel()
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ polling: {e}")
        raise
    finally:
        logger.info("–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–µ—Å—Å–∏—é –±–æ—Ç–∞...")
        await bot.session.close()


if __name__ == '__main__':
    asyncio.run(main()) 