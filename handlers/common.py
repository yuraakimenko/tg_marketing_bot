import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

from database.database import get_user, create_user, add_user_role, update_user_roles
from database.models import UserRole, SubscriptionStatus
from bot.keyboards import (
    get_role_selection_keyboard, 
    get_main_menu_seller, 
    get_main_menu_buyer,
    get_settings_keyboard,
    get_combined_main_menu
)
from bot.states import RegistrationStates

router = Router()
logger = logging.getLogger(__name__)


@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = await get_user(message.from_user.id)
    
    if user is None:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n\n"
            "üéØ –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–æ–≤ - —Å–≤–æ–µ–≥–æ —Ä–æ–¥–∞ 'Tinder –¥–ª—è –±–ª–æ–≥–µ—Ä–æ–≤'.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
            reply_markup=get_role_selection_keyboard()
        )
        await state.set_state(RegistrationStates.waiting_for_role)
    else:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await show_main_menu(message, user)


@router.callback_query(F.data.startswith("role_"))
async def handle_role_selection_unified(callback: CallbackQuery, state: FSMContext):
    """–£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏ - –∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –∏ –¥–ª—è —Å–º–µ–Ω—ã —Ä–æ–ª–∏"""
    logger.info(f"–ü–æ–ª—É—á–µ–Ω callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏: {callback.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(callback.from_user.id)
    
    role_str = callback.data.split("_")[1]  # seller –∏–ª–∏ buyer
    role = UserRole.SELLER if role_str == "seller" else UserRole.BUYER
    
    if not user:
        # –ù–û–í–´–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ - –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø
        logger.info(f"–°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ä–æ–ª—å—é: {callback.data}")
        logger.info(f"–†–æ–ª—å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –∫–∞–∫: {role}")
        logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: telegram_id={callback.from_user.id}, username={callback.from_user.username}, first_name={callback.from_user.first_name}, last_name={callback.from_user.last_name}")
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ä–æ–ª—å—é
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å telegram_id: {callback.from_user.id}")
            
            user = await create_user(
                telegram_id=callback.from_user.id,
                username=callback.from_user.username,
                first_name=callback.from_user.first_name,
                last_name=callback.from_user.last_name,
                roles=[role]
            )
            
            if not user:
                logger.error("create_user –≤–µ—Ä–Ω—É–ª None")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                return
            
            if not user.id:
                logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, –Ω–æ ID —Ä–∞–≤–Ω–æ None: {user}")
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                await callback.message.answer("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
                return
            
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: ID={user.id}, telegram_id={user.telegram_id}, —Ä–æ–ª–∏={[r.value for r in user.roles]}")
            
            await callback.answer()
            await callback.message.delete()
            
            role_name = "–ø—Ä–æ–¥–∞–∂–Ω–∏–∫" if role == UserRole.SELLER else "–∑–∞–∫—É–ø—â–∏–∫"
            await callback.message.answer(
                f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {role_name}.\n\n"
                f"üìã –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ {'–¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–æ–≤' if role == UserRole.SELLER else '–¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–æ–≥–µ—Ä–æ–≤'}.\n\n"
                "üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞ 500‚ÇΩ/–º–µ—Å.",
                reply_markup=get_main_menu_seller(False) if role == UserRole.SELLER else get_main_menu_buyer(False)
            )
            
            await state.clear()
            logger.info("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}", exc_info=True)
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            await callback.message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.\n\n"
                f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)[:100]}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å /start –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            )
    
    else:
        # –°–£–©–ï–°–¢–í–£–Æ–©–ò–ô –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ - –î–û–ë–ê–í–õ–ï–ù–ò–ï –†–û–õ–ò
        logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º: {callback.data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        logger.info(f"–ù–æ–≤–∞—è —Ä–æ–ª—å: {role}")
        logger.info(f"–¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {[r.value for r in user.roles]}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ —ç—Ç–∞ —Ä–æ–ª—å
        if user.has_role(role):
            role_name = "–ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞" if role == UserRole.SELLER else "–∑–∞–∫—É–ø—â–∏–∫–∞"
            logger.info(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å {role_name}")
            await callback.answer(f"‚ÑπÔ∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å —Ä–æ–ª—å {role_name}")
            return
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å {role} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
        success = await add_user_role(callback.from_user.id, role)
        
        if success:
            logger.info("–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞")
            await callback.answer("‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
            updated_user = await get_user(callback.from_user.id)
            has_active_subscription = updated_user.subscription_status in [
                SubscriptionStatus.ACTIVE, 
                SubscriptionStatus.AUTO_RENEWAL_OFF, 
                SubscriptionStatus.CANCELLED
            ] if updated_user else False
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–æ–ª–µ–π
            all_roles = []
            if updated_user.has_role(UserRole.SELLER):
                all_roles.append("–ø—Ä–æ–¥–∞–∂–Ω–∏–∫")
            if updated_user.has_role(UserRole.BUYER):
                all_roles.append("–∑–∞–∫—É–ø—â–∏–∫")
            
            roles_text = ", ".join(all_roles)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ —Ä–æ–ª—è–º–∏
            await callback.message.edit_text(
                f"‚úÖ <b>–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                f"üé≠ –í–∞—à–∏ —Ä–æ–ª–∏: <b>{roles_text}</b>\n"
                f"üí≥ –ü–æ–¥–ø–∏—Å–∫–∞: {'—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞' if has_active_subscription else '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
                f"üöÄ –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –≤–∞—à–∏—Ö —Ä–æ–ª–µ–π.",
                reply_markup=get_combined_main_menu(updated_user, has_active_subscription),
                parse_mode="HTML"
            )
            
            logger.info("–†–æ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            
        else:
            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏")
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–æ–ª–∏.\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚öôÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="back_to_settings")]
                ]),
                parse_mode="HTML"
            )


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ä–æ–ª–µ–π
    role_names = []
    if user.has_role(UserRole.SELLER):
        role_names.append("–ø—Ä–æ–¥–∞–∂–Ω–∏–∫")
    if user.has_role(UserRole.BUYER):
        role_names.append("–∑–∞–∫—É–ø—â–∏–∫")
    
    roles_text = ", ".join(role_names) if role_names else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    subscription_status = "–∞–∫—Ç–∏–≤–Ω–∞" if user.subscription_status == SubscriptionStatus.ACTIVE else "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
    
    await message.answer(
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"üë§ <b>–†–æ–ª–∏:</b> {roles_text}\n"
        f"üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription_status}\n"
        f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {user.rating:.1f} ({user.reviews_count} –æ—Ç–∑—ã–≤–æ–≤)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_settings_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "change_role")
async def change_role(callback: CallbackQuery, state: FSMContext):
    """–°–º–µ–Ω–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    logger.info(f"–ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–º–µ–Ω—É —Ä–æ–ª–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
    
    user = await get_user(callback.from_user.id)
    if not user:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Å–º–µ–Ω—ã —Ä–æ–ª–∏")
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–µ–∫—É—â–∏—Ö —Ä–æ–ª–µ–π
    current_roles = []
    if user.has_role(UserRole.SELLER):
        current_roles.append("–ø—Ä–æ–¥–∞–∂–Ω–∏–∫")
    if user.has_role(UserRole.BUYER):
        current_roles.append("–∑–∞–∫—É–ø—â–∏–∫")
    
    current_roles_text = ", ".join(current_roles) if current_roles else "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"
    logger.info(f"–¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}: {current_roles_text}")
    
    await callback.answer()
    await callback.message.edit_text(
        f"üîÑ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–æ–ª—è–º–∏</b>\n\n"
        f"üìã –¢–µ–∫—É—â–∏–µ —Ä–æ–ª–∏: <b>{current_roles_text}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:\n\n"
        f"‚ÑπÔ∏è <b>–í–∞–∂–Ω–æ:</b> –ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–æ–ª–µ–π.",
        reply_markup=get_role_management_keyboard(),
        parse_mode="HTML"
    )
    logger.info(f"–û—Ç–æ–±—Ä–∞–∂–µ–Ω–æ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")


@router.callback_query(F.data == "back_to_settings")
async def back_to_settings(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
    await callback.answer()
    await settings_menu(callback.message)


async def show_main_menu(message: Message, user: User):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    has_active_subscription = user.subscription_status in [
        SubscriptionStatus.ACTIVE, 
        SubscriptionStatus.AUTO_RENEWAL_OFF, 
        SubscriptionStatus.CANCELLED
    ]
    
    if user.has_role(UserRole.SELLER) and user.has_role(UserRole.BUYER):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –¥–≤—É–º—è —Ä–æ–ª—è–º–∏
        keyboard = get_combined_main_menu(user, has_active_subscription)
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n\n"
            f"üé≠ –í–∞—à–∏ —Ä–æ–ª–∏: –ø—Ä–æ–¥–∞–∂–Ω–∏–∫, –∑–∞–∫—É–ø—â–∏–∫\n"
            f"üí≥ –ü–æ–¥–ø–∏—Å–∫–∞: {'–∞–∫—Ç–∏–≤–Ω–∞' if has_active_subscription else '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    elif user.has_role(UserRole.SELLER):
        # –¢–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–Ω–∏–∫
        keyboard = get_main_menu_seller(has_active_subscription)
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n\n"
            f"üé≠ –í–∞—à–∞ —Ä–æ–ª—å: –ø—Ä–æ–¥–∞–∂–Ω–∏–∫\n"
            f"üí≥ –ü–æ–¥–ø–∏—Å–∫–∞: {'–∞–∫—Ç–∏–≤–Ω–∞' if has_active_subscription else '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    elif user.has_role(UserRole.BUYER):
        # –¢–æ–ª—å–∫–æ –∑–∞–∫—É–ø—â–∏–∫
        keyboard = get_main_menu_buyer(has_active_subscription)
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, {user.first_name or '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!\n\n"
            f"üé≠ –í–∞—à–∞ —Ä–æ–ª—å: –∑–∞–∫—É–ø—â–∏–∫\n"
            f"üí≥ –ü–æ–¥–ø–∏—Å–∫–∞: {'–∞–∫—Ç–∏–≤–Ω–∞' if has_active_subscription else '–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞'}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–µ–∑ —Ä–æ–ª–µ–π (–æ—à–∏–±–∫–∞)
        await message.answer(
            "‚ùå <b>–ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–æ–ª—è–º–∏</b>\n\n"
            "–£ –≤–∞—Å –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∏ –æ–¥–Ω–∞ —Ä–æ–ª—å.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:",
            reply_markup=get_role_selection_keyboard(),
            parse_mode="HTML"
        )


async def update_main_menu_keyboard(message: Message, user_id: int):
    """–û–±–Ω–æ–≤–∏—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await get_user(user_id)
    if not user:
        return
    
    has_active_subscription = user.subscription_status in [
        SubscriptionStatus.ACTIVE, 
        SubscriptionStatus.AUTO_RENEWAL_OFF, 
        SubscriptionStatus.CANCELLED
    ]
    
    keyboard = get_combined_main_menu(user, has_active_subscription)
    
    await message.answer(
        "üîÑ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏.",
        reply_markup=keyboard
    )


def get_role_management_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª—è–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞", callback_data="role_seller")],
        [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å –∑–∞–∫—É–ø—â–∏–∫–∞", callback_data="role_buyer")],
        [InlineKeyboardButton(text="‚öôÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="back_to_settings")]
    ])


def get_combined_main_menu(user, has_active_subscription: bool) -> InlineKeyboardMarkup:
    """–ö–æ–º–±–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ —Ä–æ–ª—è–º–∏"""
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    
    keyboard_buttons = []
    
    # –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞
    if user.has_role(UserRole.SELLER):
        keyboard_buttons.extend([
            [KeyboardButton(text="üìù –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞")],
            [KeyboardButton(text="üìã –ú–æ–∏ –±–ª–æ–≥–µ—Ä—ã")],
            [KeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–≥–µ—Ä–∞")]
        ])
    
    # –§—É–Ω–∫—Ü–∏–∏ –∑–∞–∫—É–ø—â–∏–∫–∞
    if user.has_role(UserRole.BUYER):
        keyboard_buttons.extend([
            [KeyboardButton(text="üîç –ü–æ–∏—Å–∫ –±–ª–æ–≥–µ—Ä–æ–≤")],
            [KeyboardButton(text="üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞")],
            [KeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")]
        ])
    
    # –û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏
    keyboard_buttons.extend([
        [KeyboardButton(text="üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")],
        [KeyboardButton(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ])
    
    return ReplyKeyboardMarkup(
        keyboard=keyboard_buttons,
        resize_keyboard=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ"
    ) 