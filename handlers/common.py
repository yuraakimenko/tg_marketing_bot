import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.context import FSMContext

from database.database import get_user, create_user, update_user_role
from database.models import UserRole, SubscriptionStatus
from bot.keyboards import (
    get_role_selection_keyboard, 
    get_main_menu_seller, 
    get_main_menu_buyer,
    get_settings_keyboard
)
from bot.states import RegistrationStates

router = Router()
logger = logging.getLogger(__name__)


@router.message(CommandStart())
async def start_command(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = await get_user(message.from_user.id)
    
    if user is None:
        # –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å
        await message.answer(
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {message.from_user.first_name}!\n\n"
            "üéØ –≠—Ç–æ –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–æ–≤ - —Å–≤–æ–µ–≥–æ —Ä–æ–¥–∞ 'Tinder –¥–ª—è –±–ª–æ–≥–µ—Ä–æ–≤'.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É —Ä–æ–ª—å:",
            reply_markup=get_role_selection_keyboard()
        )
        await state.set_state(RegistrationStates.waiting_for_role)
    else:
        # –°—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        await show_main_menu(message, user)


@router.callback_query(F.data.startswith("role_"))
async def handle_role_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–æ–ª–∏"""
    role_str = callback.data.split("_")[1]  # seller –∏–ª–∏ buyer
    role = UserRole.SELLER if role_str == "seller" else UserRole.BUYER
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await create_user(
        telegram_id=callback.from_user.id,
        username=callback.from_user.username,
        first_name=callback.from_user.first_name,
        last_name=callback.from_user.last_name,
        role=role
    )
    
    await callback.answer()
    await callback.message.delete()
    
    role_name = "–ø—Ä–æ–¥–∞–∂–Ω–∏–∫" if role == UserRole.SELLER else "–∑–∞–∫—É–ø—â–∏–∫"
    await callback.message.answer(
        f"‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {role_name}.\n\n"
        f"üìã –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ {'–¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–æ–≤' if role == UserRole.SELLER else '–¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–æ–≥–µ—Ä–æ–≤'}.\n\n"
        "üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –ø–æ–¥–ø–∏—Å–∫–∞ 500‚ÇΩ/–º–µ—Å.",
        reply_markup=get_main_menu_seller(False) if role == UserRole.SELLER else get_main_menu_buyer(False)
    )
    
    await state.clear()


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def settings_menu(message: Message):
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    role_name = "–ø—Ä–æ–¥–∞–∂–Ω–∏–∫" if user.role == UserRole.SELLER else "–∑–∞–∫—É–ø—â–∏–∫"
    subscription_status = "–∞–∫—Ç–∏–≤–Ω–∞" if user.subscription_status == SubscriptionStatus.ACTIVE else "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
    
    await message.answer(
        f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        f"üë§ <b>–†–æ–ª—å:</b> {role_name}\n"
        f"üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription_status}\n"
        f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {user.rating:.1f} ({user.reviews_count} –æ—Ç–∑—ã–≤–æ–≤)\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_settings_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "change_role")
async def change_role(callback: CallbackQuery, state: FSMContext):
    """–°–º–µ–Ω–∞ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await callback.answer()
    await callback.message.edit_text(
        "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å:\n\n"
        "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–∏ –≤—ã –ø–æ—Ç–µ—Ä—è–µ—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –ø—Ä–µ–¥—ã–¥—É—â–µ–π —Ä–æ–ª–∏.",
        reply_markup=get_role_selection_keyboard()
    )
    await state.set_state(RegistrationStates.waiting_for_role)


@router.callback_query(F.data.startswith("role_"), RegistrationStates.waiting_for_role)
async def handle_role_change(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ä–æ–ª–∏"""
    role_str = callback.data.split("_")[1]
    new_role = UserRole.SELLER if role_str == "seller" else UserRole.BUYER
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    success = await update_user_role(callback.from_user.id, new_role)
    
    if success:
        await callback.answer()
        await callback.message.delete()
        
        role_name = "–ø—Ä–æ–¥–∞–∂–Ω–∏–∫" if new_role == UserRole.SELLER else "–∑–∞–∫—É–ø—â–∏–∫"
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
        updated_user = await get_user(callback.from_user.id)
        has_active_subscription = updated_user.subscription_status in [
            SubscriptionStatus.ACTIVE, 
            SubscriptionStatus.AUTO_RENEWAL_OFF, 
            SubscriptionStatus.CANCELLED
        ] if updated_user else False
        
        await callback.message.answer(
            f"‚úÖ –†–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {role_name}!",
            reply_markup=get_main_menu_seller(has_active_subscription) if new_role == UserRole.SELLER else get_main_menu_buyer(has_active_subscription)
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–∏")
    
    await state.clear()


@router.callback_query(F.data == "profile")
async def show_profile(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    role_name = "–ø—Ä–æ–¥–∞–∂–Ω–∏–∫" if user.role == UserRole.SELLER else "–∑–∞–∫—É–ø—â–∏–∫"
    subscription_status = "–∞–∫—Ç–∏–≤–Ω–∞" if user.subscription_status == SubscriptionStatus.ACTIVE else "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
    
    profile_text = (
        f"üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å</b>\n\n"
        f"üÜî <b>ID:</b> {user.id}\n"
        f"üë§ <b>–ò–º—è:</b> {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üìõ <b>Username:</b> @{user.username or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"üé≠ <b>–†–æ–ª—å:</b> {role_name}\n"
        f"üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription_status}\n"
        f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {user.rating:.1f} ({user.reviews_count} –æ—Ç–∑—ã–≤–æ–≤)\n"
        f"üìÖ <b>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</b> {user.created_at.strftime('%d.%m.%Y')}"
    )
    
    if user.subscription_end_date:
        profile_text += f"\nüóìÔ∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:</b> {user.subscription_end_date.strftime('%d.%m.%Y')}"
    
    await callback.answer()
    await callback.message.edit_text(profile_text, parse_mode="HTML")


@router.callback_query(F.data == "help")
async def show_help(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"""
    help_text = (
        "‚ùì <b>–°–ø—Ä–∞–≤–∫–∞</b>\n\n"
        "ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–ª–æ–≥–µ—Ä–æ–≤ –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏—Ö.\n\n"
        "<b>–î–ª—è –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–æ–≤:</b>\n"
        "‚Ä¢ –î–æ–±–∞–≤–ª—è–π—Ç–µ –±–ª–æ–≥–µ—Ä–æ–≤ –≤ –±–∞–∑—É\n"
        "‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏ —Ü–µ–Ω—ã\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –∑–∞–∫–∞–∑—ã –æ—Ç –∑–∞–∫—É–ø—â–∏–∫–æ–≤\n\n"
        "<b>–î–ª—è –∑–∞–∫—É–ø—â–∏–∫–æ–≤:</b>\n"
        "‚Ä¢ –ò—â–∏—Ç–µ –±–ª–æ–≥–µ—Ä–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞–π—Ç–µ –ø–æ–¥–±–æ—Ä–∫–∏ –ø–æ –≤–∞—à–∏–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º\n"
        "‚Ä¢ –û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞\n\n"
        "üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> 500‚ÇΩ/–º–µ—Å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º\n\n"
        "üìû <b>–ü–æ–¥–¥–µ—Ä–∂–∫–∞:</b> @support_username"
    )
    
    await callback.answer()
    await callback.message.edit_text(help_text, parse_mode="HTML")


@router.message(Command("help"))
async def help_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –ø–æ–º–æ—â–∏"""
    await show_help(message)


async def show_main_menu(message: Message, user):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    has_active_subscription = user.subscription_status in [
        SubscriptionStatus.ACTIVE, 
        SubscriptionStatus.AUTO_RENEWAL_OFF, 
        SubscriptionStatus.CANCELLED
    ]
    
    if user.role == UserRole.SELLER:
        greeting = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name or '–ü—Ä–æ–¥–∞–∂–Ω–∏–∫'}!\n\n"
            "üìã –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –±–ª–æ–≥–µ—Ä–∞–º–∏.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        keyboard = get_main_menu_seller(has_active_subscription)
    else:
        greeting = (
            f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name or '–ó–∞–∫—É–ø—â–∏–∫'}!\n\n"
            "üîç –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–ª–æ–≥–µ—Ä–æ–≤.\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        )
        keyboard = get_main_menu_buyer(has_active_subscription)
    
    await message.answer(greeting, reply_markup=keyboard) 