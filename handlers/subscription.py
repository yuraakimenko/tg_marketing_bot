import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
import os

from database.database import (get_user, update_subscription_status, get_user_subscription, 
                                    toggle_auto_renewal, cancel_subscription, get_user_payment_history)
from database.models import SubscriptionStatus
from bot.keyboards import (get_subscription_keyboard, get_payment_confirmation_keyboard,
                          get_subscription_management_keyboard, get_subscription_cancel_confirmation_keyboard)
from utils.payments import create_subscription_payment

router = Router()
logger = logging.getLogger(__name__)

# –¶–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –∫–æ–ø–µ–π–∫–∞—Ö (500 —Ä—É–±–ª–µ–π = 50000 –∫–æ–ø–µ–µ–∫)
SUBSCRIPTION_PRICE = 50000
PAYMENT_PROVIDER_TOKEN = os.getenv('PAYMENT_PROVIDER_TOKEN', 'TEST_TOKEN')


@router.message(F.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞")
async def subscription_menu(message: Message):
    """–ú–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    if user.subscription_status == SubscriptionStatus.ACTIVE:
        # –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        end_date = user.subscription_end_date.strftime('%d.%m.%Y') if user.subscription_end_date else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        
        subscription_text = (
            f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞!</b>\n\n"
            f"üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {end_date}\n\n"
            f"üéØ <b>–í–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            f"‚Ä¢ –ü–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º\n"
            f"‚Ä¢ –†–∞–∑–º–µ—â–µ–Ω–∏–µ/–ø–æ–∏—Å–∫ –±–ª–æ–≥–µ—Ä–æ–≤\n"
            f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤\n"
            f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤\n\n"
            f"üí° –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞ 3 –¥–Ω—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è."
        )
    else:
        # –ù–µ–∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        subscription_text = (
            f"‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞</b>\n\n"
            f"üí≥ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 500‚ÇΩ/–º–µ—Å—è—Ü\n\n"
            f"üéØ <b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</b>\n"
            f"‚Ä¢ –†–∞–∑–º–µ—â–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–æ–≤ (–¥–ª—è –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–æ–≤)\n"
            f"‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –±–ª–æ–≥–µ—Ä–æ–≤ (–¥–ª—è –∑–∞–∫—É–ø—â–∏–∫–æ–≤)\n"
            f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤\n"
            f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ –∏ –æ—Ç–∑—ã–≤–æ–≤\n"
            f"‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö\n\n"
            f"üí° –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
        )
    
    await message.answer(
        subscription_text,
        reply_markup=get_subscription_keyboard() if user.subscription_status != SubscriptionStatus.ACTIVE else None,
        parse_mode="HTML"
    )


@router.callback_query(F.data == "subscription_info")
async def subscription_info(callback: CallbackQuery):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    info_text = (
        f"‚ÑπÔ∏è <b>–ü–æ–¥—Ä–æ–±–Ω–æ –æ –ø–æ–¥–ø–∏—Å–∫–µ</b>\n\n"
        f"üí∞ <b>–°—Ç–æ–∏–º–æ—Å—Ç—å:</b> 500‚ÇΩ –≤ –º–µ—Å—è—Ü\n\n"
        f"üìã <b>–î–ª—è –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–æ–≤:</b>\n"
        f"‚Ä¢ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –±–ª–æ–≥–µ—Ä–æ–≤\n"
        f"‚Ä¢ –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞\n"
        f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –æ—Ç –∑–∞–∫—É–ø—â–∏–∫–æ–≤\n"
        f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤\n\n"
        f"üîç <b>–î–ª—è –∑–∞–∫—É–ø—â–∏–∫–æ–≤:</b>\n"
        f"‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –≤—Å–µ–π –±–∞–∑–µ –±–ª–æ–≥–µ—Ä–æ–≤\n"
        f"‚Ä¢ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã –ø–æ–∏—Å–∫–∞\n"
        f"‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–æ–≤\n"
        f"‚Ä¢ –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞\n\n"
        f"‚ö° <b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>\n"
        f"‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è\n"
        f"‚Ä¢ –ë–µ–∑ –∫–æ–º–∏—Å—Å–∏–π –∑–∞ —Å–¥–µ–ª–∫–∏\n"
        f"‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
        f"‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã\n\n"
        f"üîÑ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–æ–¥–ª–µ–≤–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏"
    )
    
    await callback.answer()
    await callback.message.edit_text(
        info_text,
        reply_markup=get_subscription_keyboard(),
        parse_mode="HTML"
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏
@router.callback_query(F.data == "pay_monthly")
async def initiate_monthly_payment(callback: CallbackQuery):
    """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –º–µ—Å—è—á–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É"""
    await initiate_payment(callback, "monthly")

@router.callback_query(F.data == "pay_quarterly") 
async def initiate_quarterly_payment(callback: CallbackQuery):
    """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –∫–≤–∞—Ä—Ç–∞–ª—å–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É"""
    await initiate_payment(callback, "quarterly")

@router.callback_query(F.data == "pay_yearly")
async def initiate_yearly_payment(callback: CallbackQuery):
    """–ò–Ω–∏—Ü–∏–∞—Ü–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∑–∞ –≥–æ–¥–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É"""
    await initiate_payment(callback, "yearly")


async def initiate_payment(callback: CallbackQuery, subscription_type: str):
    """–û–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    if user.subscription_status == SubscriptionStatus.ACTIVE:
        await callback.answer("‚úÖ –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞")
        return
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Robokassa
    payment_data = create_subscription_payment(user.telegram_id, subscription_type)
    
    # –ù–∞–∑–≤–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
    subscription_names = {
        "monthly": "1 –º–µ—Å—è—Ü",
        "quarterly": "3 –º–µ—Å—è—Ü–∞", 
        "yearly": "12 –º–µ—Å—è—Ü–µ–≤"
    }
    
    subscription_name = subscription_names.get(subscription_type, "1 –º–µ—Å—è—Ü")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if payment_data.get('is_mock'):
        payment_text = (
            f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ({subscription_name})</b>\n\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {payment_data['amount']}‚ÇΩ\n"
            f"üÜî <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {payment_data['invoice_id']}\n\n"
            f"‚ö†Ô∏è <b>–¢–ï–°–¢–û–í–´–ô –†–ï–ñ–ò–ú</b>\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–∏—Ç–∞—Ü–∏–∏ –æ–ø–ª–∞—Ç—ã:"
        )
    else:
        payment_text = (
            f"üí≥ <b>–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ({subscription_name})</b>\n\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {payment_data['amount']}‚ÇΩ\n"
            f"üÜî <b>–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:</b> {payment_data['invoice_id']}\n\n"
            f"üîê <b>–ü–ª–∞—Ç–µ–∂ —á–µ—Ä–µ–∑ Robokassa</b>\n"
            f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:"
        )
    
    await callback.answer()
    await callback.message.edit_text(
        payment_text,
        reply_markup=get_payment_confirmation_keyboard(payment_data),
        parse_mode="HTML"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–º–æ–∂–Ω–æ –≤ –ë–î)
    logger.info(f"Payment initiated for user {user.telegram_id}: {payment_data['invoice_id']}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ mock-–ø–ª–∞—Ç–µ–∂–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("mock_payment_success_"))
async def handle_mock_payment_success(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ mock-–ø–ª–∞—Ç–µ–∂–∞"""
    invoice_id = callback.data.split("_", 3)[3]
    user = await get_user(callback.from_user.id)
    
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ —Å—É–º–º–µ (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å –ª–æ–≥–∏–∫—É)
    subscription_duration = timedelta(days=30)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –º–µ—Å—è—Ü
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏–∑ invoice_id
    if "quarterly" in invoice_id:
        subscription_duration = timedelta(days=90)
    elif "yearly" in invoice_id:
        subscription_duration = timedelta(days=365)
    
    end_date = datetime.now() + subscription_duration
    
    success = await update_subscription_status(
        user.id, 
        SubscriptionStatus.ACTIVE, 
        end_date
    )
    
    if success:
        await callback.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!")
        await callback.message.edit_text(
            f"üéâ <b>–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y')}\n"
            f"üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {invoice_id}\n\n"
            f"üöÄ –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.\n"
            f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.",
            parse_mode="HTML"
        )
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        from bot.keyboards import get_main_menu_seller, get_main_menu_buyer
        from database.models import UserRole
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        updated_user = await get_user(callback.from_user.id)
        if updated_user:
            has_active_subscription = updated_user.subscription_status in [
                SubscriptionStatus.ACTIVE, 
                SubscriptionStatus.AUTO_RENEWAL_OFF, 
                SubscriptionStatus.CANCELLED
            ]
            
            keyboard = get_main_menu_seller(has_active_subscription) if updated_user.role == UserRole.SELLER else get_main_menu_buyer(has_active_subscription)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await callback.message.answer(
                "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π'.",
                reply_markup=keyboard
            )
        
        logger.info(f"Mock payment successful for user {user.telegram_id}, invoice {invoice_id}")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏")


@router.callback_query(F.data.startswith("mock_payment_failure_"))
async def handle_mock_payment_failure(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ mock-–ø–ª–∞—Ç–µ–∂–∞"""
    invoice_id = callback.data.split("_", 3)[3]
    
    await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–∫–ª–æ–Ω–µ–Ω")
    await callback.message.edit_text(
        f"‚ùå <b>–ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª</b>\n\n"
        f"üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {invoice_id}\n"
        f"üìù –ü—Ä–∏—á–∏–Ω–∞: –ò–º–∏—Ç–∞—Ü–∏—è –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞\n\n"
        f"üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–ª–∞—Ç–∏—Ç—å –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
        reply_markup=get_subscription_keyboard(),
        parse_mode="HTML"
    )
    
    logger.info(f"Mock payment failure for invoice {invoice_id}")


@router.callback_query(F.data.startswith("check_payment_"))
async def check_payment_status(callback: CallbackQuery):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞"""
    invoice_id = callback.data.split("_", 2)[2]
    
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —á–µ—Ä–µ–∑ API Robokassa
    from utils.payments import get_payment_status
    
    status = get_payment_status(invoice_id)
    
    if status['status'] == 'paid':
        user = await get_user(callback.from_user.id)
        if user:
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∫—É
            end_date = datetime.now() + timedelta(days=30)
            
            success = await update_subscription_status(
                user.id, 
                SubscriptionStatus.ACTIVE, 
                end_date
            )
            
            if success:
                await callback.answer("‚úÖ –ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!")
                await callback.message.edit_text(
                    f"üéâ <b>–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!</b>\n\n"
                    f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!\n"
                    f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date.strftime('%d.%m.%Y')}\n"
                    f"üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {invoice_id}\n\n"
                    f"üöÄ –¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞.",
                    parse_mode="HTML"
                )
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –Ω–æ–≤–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                from bot.keyboards import get_main_menu_seller, get_main_menu_buyer
                from database.models import UserRole
                
                # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                updated_user = await get_user(callback.from_user.id)
                if updated_user:
                    has_active_subscription = updated_user.subscription_status in [
                        SubscriptionStatus.ACTIVE, 
                        SubscriptionStatus.AUTO_RENEWAL_OFF, 
                        SubscriptionStatus.CANCELLED
                    ]
                    
                    keyboard = get_main_menu_seller(has_active_subscription) if updated_user.role == UserRole.SELLER else get_main_menu_buyer(has_active_subscription)
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
                    await callback.message.answer(
                        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n\n"
                        "–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–Ω–æ–ø–∫–∞ '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π'.",
                        reply_markup=keyboard
                    )
            else:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")
    elif status['status'] == 'pending':
        await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ")
        await callback.message.edit_text(
            f"‚è≥ <b>–ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ</b>\n\n"
            f"üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: {invoice_id}\n"
            f"üìù –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n\n"
            f"üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.",
            reply_markup=get_payment_confirmation_keyboard({
                'invoice_id': invoice_id,
                'is_mock': False
            }),
            parse_mode="HTML"
        )
    else:
        await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω")


@router.callback_query(F.data == "cancel_payment")
async def cancel_payment(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    await callback.answer("–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω")
    await callback.message.edit_text(
        "‚ùå –ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –≤—ã–±–æ—Ä—É –ø–æ–¥–ø–∏—Å–∫–∏:",
        reply_markup=get_subscription_keyboard()
    )


# –°—Ç–∞—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ Telegram Payments —É–¥–∞–ª–µ–Ω—ã - —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º Robokassa


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    
    role_name = "–ø—Ä–æ–¥–∞–∂–Ω–∏–∫" if user.role.value == "seller" else "–∑–∞–∫—É–ø—â–∏–∫"
    subscription_status = "–∞–∫—Ç–∏–≤–Ω–∞" if user.subscription_status == SubscriptionStatus.ACTIVE else "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
    
    stats_text = (
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üë§ <b>–†–æ–ª—å:</b> {role_name}\n"
        f"üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription_status}\n"
        f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {user.rating:.1f}\n"
        f"üìù <b>–û—Ç–∑—ã–≤–æ–≤:</b> {user.reviews_count}\n"
        f"üìÖ <b>–í –±–æ—Ç–µ —Å:</b> {user.created_at.strftime('%d.%m.%Y')}\n"
    )
    
    if user.role.value == "seller":
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞
        from database.database import get_user_bloggers
        bloggers = await get_user_bloggers(user.id)
        stats_text += f"\nüìù <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –±–ª–æ–≥–µ—Ä–æ–≤:</b> {len(bloggers)}\n"
        
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:
        # - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ –±–ª–æ–≥–µ—Ä–æ–≤
        # - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º
        # - etc.
    
    if user.subscription_end_date:
        stats_text += f"üóìÔ∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:</b> {user.subscription_end_date.strftime('%d.%m.%Y')}"
    
    await message.answer(stats_text, parse_mode="HTML")


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–û–î–ü–ò–°–ö–û–ô ===

@router.message(F.text == "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π")
async def subscription_management_menu(message: Message):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    user = await get_user(message.from_user.id)
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
    if user.subscription_status not in [SubscriptionStatus.ACTIVE, SubscriptionStatus.AUTO_RENEWAL_OFF, SubscriptionStatus.CANCELLED]:
        await message.answer(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏.\n\n"
            "–î–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π —Å–Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –µ—ë –≤ —Ä–∞–∑–¥–µ–ª–µ 'üí≥ –ü–æ–¥–ø–∏—Å–∫–∞'."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    subscription = await get_user_subscription(user.id)
    
    # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ subscriptions, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É,
    # —Å–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    if not subscription and user.subscription_end_date:
        from database.models import Subscription
        from datetime import datetime
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        subscription = Subscription(
            id=0,  # –í—Ä–µ–º–µ–Ω–Ω—ã–π ID
            user_id=user.id,
            start_date=user.created_at,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∫–∞–∫ –Ω–∞—á–∞–ª–æ
            end_date=user.subscription_end_date,
            amount=50000,  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è —Ü–µ–Ω–∞ 500‚ÇΩ
            status=user.subscription_status,
            auto_renewal=True,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–∫–ª—é—á–µ–Ω–æ
            cancelled_at=None,
            created_at=user.created_at
        )
    
    if not subscription:
        await message.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è
    auto_renewal_status = "–≤–∫–ª—é—á–µ–Ω–æ" if subscription.auto_renewal else "–æ—Ç–∫–ª—é—á–µ–Ω–æ"
    status_emoji = "‚úÖ" if subscription.auto_renewal else "‚è∏Ô∏è"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
    end_date = subscription.end_date.strftime('%d.%m.%Y %H:%M')
    amount = subscription.amount / 100  # –∏–∑ –∫–æ–ø–µ–µ–∫ –≤ —Ä—É–±–ª–∏
    
    # –°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
    status_text = ""
    if subscription.status == SubscriptionStatus.ACTIVE:
        status_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"
    elif subscription.status == SubscriptionStatus.AUTO_RENEWAL_OFF:
        status_text = "‚è∏Ô∏è –ê–∫—Ç–∏–≤–Ω–∞ (–±–µ–∑ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è)"
    elif subscription.status == SubscriptionStatus.CANCELLED:
        status_text = "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞ (–¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è)"
    
    management_text = (
        f"üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        f"üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {end_date}\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {amount}‚ÇΩ\n"
        f"üîÑ <b>–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ:</b> {status_emoji} {auto_renewal_status}\n\n"
    )
    
    if subscription.cancelled_at:
        cancelled_date = subscription.cancelled_at.strftime('%d.%m.%Y %H:%M')
        management_text += f"‚ö†Ô∏è <b>–û—Ç–º–µ–Ω–µ–Ω–∞:</b> {cancelled_date}\n\n"
    
    # –ï—Å–ª–∏ —ç—Ç–æ –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ (–±–µ–∑ –∑–∞–ø–∏—Å–∏ –≤ –ë–î), –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ
    if subscription.id == 0:
        management_text += "‚ÑπÔ∏è <i>–î–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é —Å–∏—Å—Ç–µ–º—É.</i>\n\n"
    
    management_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await message.answer(
        management_text,
        reply_markup=get_subscription_management_keyboard(subscription.auto_renewal),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "disable_auto_renewal")
async def disable_auto_renewal(callback: CallbackQuery):
    """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    success = await toggle_auto_renewal(user.id, False)
    
    if success:
        await callback.answer("‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ")
        await callback.message.edit_text(
            "‚úÖ <b>–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ</b>\n\n"
            "üìã –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, "
            "–ø–æ—Å–ª–µ —á–µ–≥–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–µ –ø—Ä–æ–¥–ª–∏—Ç—Å—è.\n\n"
            "üí° –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –∏–ª–∏ "
            "–ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤—Ä—É—á–Ω—É—é –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
            reply_markup=get_subscription_management_keyboard(False),
            parse_mode="HTML"
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è")


@router.callback_query(F.data == "enable_auto_renewal")
async def enable_auto_renewal(callback: CallbackQuery):
    """–í–∫–ª—é—á–µ–Ω–∏–µ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    success = await toggle_auto_renewal(user.id, True)
    
    if success:
        await callback.answer("‚úÖ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ")
        await callback.message.edit_text(
            "‚úÖ <b>–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ</b>\n\n"
            "üîÑ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–¥–ª–µ–≤–∞—Ç—å—Å—è –∑–∞ 3 –¥–Ω—è –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è "
            "–Ω–∞ —Ç–æ—Ç –∂–µ –ø–µ—Ä–∏–æ–¥ –ø–æ —Ç–æ–π –∂–µ —Ü–µ–Ω–µ.\n\n"
            "üí≥ –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∞–Ω–∏—è.",
            reply_markup=get_subscription_management_keyboard(True),
            parse_mode="HTML"
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è")


@router.callback_query(F.data == "suspend_subscription")
async def suspend_subscription(callback: CallbackQuery):
    """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–µ—Ä–∏–æ–¥–∞"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    success = await cancel_subscription(user.id, cancel_immediately=False)
    
    if success:
        await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        await callback.message.edit_text(
            "‚è∏Ô∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞</b>\n\n"
            "üìã –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞, "
            "–ø–æ—Å–ª–µ —á–µ–≥–æ –±—É–¥–µ—Ç –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.\n\n"
            "üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.\n\n"
            "üí° –î–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–¥–µ–ª 'üí≥ –ü–æ–¥–ø–∏—Å–∫–∞'.",
            reply_markup=get_subscription_management_keyboard(False),
            parse_mode="HTML"
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏")


@router.callback_query(F.data == "cancel_subscription_full")
async def request_full_cancellation(callback: CallbackQuery):
    """–ó–∞–ø—Ä–æ—Å –ø–æ–ª–Ω–æ–π –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer()
    await callback.message.edit_text(
        "‚ö†Ô∏è <b>–ü–æ–ª–Ω–∞—è –æ—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏</b>\n\n"
        "‚ùó –í–Ω–∏–º–∞–Ω–∏–µ! –ü—Ä–∏ –ø–æ–ª–Ω–æ–π –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏:\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –±—É–¥–µ—Ç –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω\n"
        "‚Ä¢ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ –∑–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –Ω–µ –ø—Ä–µ–¥—É—Å–º–æ—Ç—Ä–µ–Ω\n"
        "‚Ä¢ –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è\n\n"
        "ü§î –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?",
        reply_markup=get_subscription_cancel_confirmation_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "confirm_cancel_subscription")
async def confirm_full_cancellation(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    success = await cancel_subscription(user.id, cancel_immediately=True)
    
    if success:
        await callback.answer("‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        await callback.message.edit_text(
            "‚ùå <b>–ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ—Ç–º–µ–Ω–µ–Ω–∞</b>\n\n"
            "üìã –î–æ—Å—Ç—É–ø –∫ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
            "üíæ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n"
            "üí° –î–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É "
            "–≤ —Ä–∞–∑–¥–µ–ª–µ 'üí≥ –ü–æ–¥–ø–∏—Å–∫–∞'.\n\n"
            "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞!",
            parse_mode="HTML"
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –ø–æ–¥–ø–∏—Å–∫–∏")


@router.callback_query(F.data == "cancel_subscription_cancel")
async def cancel_cancellation(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.answer("–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞ üòä")
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    user = await get_user(callback.from_user.id)
    subscription = await get_user_subscription(user.id)
    
    await callback.message.edit_text(
        "üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_subscription_management_keyboard(subscription.auto_renewal if subscription else True),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "payment_history")
async def show_payment_history(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–ª–∞—Ç–µ–∂–µ–π"""
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    history = await get_user_payment_history(user.id, limit=10)
    
    if not history:
        await callback.answer("üìã –ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π –ø—É—Å—Ç–∞")
        return
    
    history_text = "üìä <b>–ò—Å—Ç–æ—Ä–∏—è –ø–ª–∞—Ç–µ–∂–µ–π</b>\n\n"
    
    for i, payment in enumerate(history, 1):
        amount = payment.amount / 100  # –∏–∑ –∫–æ–ø–µ–µ–∫ –≤ —Ä—É–±–ª–∏
        start_date = payment.start_date.strftime('%d.%m.%Y')
        end_date = payment.end_date.strftime('%d.%m.%Y')
        
        status_emoji = {
            SubscriptionStatus.ACTIVE: "‚úÖ",
            SubscriptionStatus.EXPIRED: "‚è∞",
            SubscriptionStatus.CANCELLED: "‚ùå",
            SubscriptionStatus.INACTIVE: "üí§"
        }.get(payment.status, "‚ùì")
        
        history_text += (
            f"{i}. {status_emoji} <b>{amount}‚ÇΩ</b>\n"
            f"   üìÖ {start_date} - {end_date}\n"
            f"   üìù {payment.status.value}\n"
        )
        
        if payment.payment_id:
            history_text += f"   üÜî {payment.payment_id}\n"
        
        history_text += "\n"
    
    await callback.answer()
    await callback.message.edit_text(
        history_text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_subscription_management")]
        ]),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "back_to_subscription_management")
async def back_to_subscription_management(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    user = await get_user(callback.from_user.id)
    subscription = await get_user_subscription(user.id)
    
    if not subscription:
        await callback.answer("‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    await callback.answer()
    
    # –ü–æ–≤—Ç–æ—Ä—è–µ–º –ª–æ–≥–∏–∫—É –∏–∑ subscription_management_menu
    auto_renewal_status = "–≤–∫–ª—é—á–µ–Ω–æ" if subscription.auto_renewal else "–æ—Ç–∫–ª—é—á–µ–Ω–æ"
    status_emoji = "‚úÖ" if subscription.auto_renewal else "‚è∏Ô∏è"
    
    end_date = subscription.end_date.strftime('%d.%m.%Y %H:%M')
    amount = subscription.amount / 100
    
    status_text = ""
    if subscription.status == SubscriptionStatus.ACTIVE:
        status_text = "‚úÖ –ê–∫—Ç–∏–≤–Ω–∞"
    elif subscription.status == SubscriptionStatus.AUTO_RENEWAL_OFF:
        status_text = "‚è∏Ô∏è –ê–∫—Ç–∏–≤–Ω–∞ (–±–µ–∑ –∞–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏—è)"
    elif subscription.status == SubscriptionStatus.CANCELLED:
        status_text = "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞ (–¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è)"
    
    management_text = (
        f"üîß <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π</b>\n\n"
        f"üìä <b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        f"üìÖ <b>–î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ:</b> {end_date}\n"
        f"üí∞ <b>–°—É–º–º–∞:</b> {amount}‚ÇΩ\n"
        f"üîÑ <b>–ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ:</b> {status_emoji} {auto_renewal_status}\n\n"
    )
    
    if subscription.cancelled_at:
        cancelled_date = subscription.cancelled_at.strftime('%d.%m.%Y %H:%M')
        management_text += f"‚ö†Ô∏è <b>–û—Ç–º–µ–Ω–µ–Ω–∞:</b> {cancelled_date}\n\n"
    
    management_text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    await callback.message.edit_text(
        management_text,
        reply_markup=get_subscription_management_keyboard(subscription.auto_renewal),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    await callback.message.delete()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    user = await get_user(callback.from_user.id)
    if user:
        from bot.keyboards import get_main_menu_seller, get_main_menu_buyer
        from database.models import UserRole
        
        has_active_subscription = user.subscription_status in [
            SubscriptionStatus.ACTIVE, 
            SubscriptionStatus.AUTO_RENEWAL_OFF, 
            SubscriptionStatus.CANCELLED
        ]
        
        keyboard = get_main_menu_seller(has_active_subscription) if user.role == UserRole.SELLER else get_main_menu_buyer(has_active_subscription)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await callback.message.answer(
            "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
    else:
        await callback.message.answer(
            "üè† –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.",
            parse_mode="HTML"
        ) 