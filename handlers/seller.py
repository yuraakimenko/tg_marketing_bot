import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from database.database import (
    get_user, create_blogger, get_user_bloggers, 
    get_blogger, delete_blogger, update_blogger
)
from database.models import UserRole, SubscriptionStatus
from bot.keyboards import (
    get_platform_keyboard, get_category_keyboard, 
    get_yes_no_keyboard, get_blogger_list_keyboard,
    get_blogger_details_keyboard
)
from bot.states import SellerStates

router = Router()
logger = logging.getLogger(__name__)


@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞")
async def add_blogger_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞"""
    user = await get_user(message.from_user.id)
    if not user or user.role != UserRole.SELLER:
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞–º.")
        return
    
    if user.subscription_status != SubscriptionStatus.ACTIVE:
        await message.answer(
            "‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n"
            "üí≥ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–¥–ø–∏—Å–∫–∞'."
        )
        return
    
    await message.answer(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞</b>\n\n"
        "–®–∞–≥ 1 –∏–∑ 8\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–ª–æ–≥–µ—Ä–∞:",
        parse_mode="HTML"
    )
    await state.set_state(SellerStates.waiting_for_blogger_name)


@router.message(SellerStates.waiting_for_blogger_name)
async def process_blogger_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –±–ª–æ–≥–µ—Ä–∞"""
    await state.update_data(name=message.text)
    
    await message.answer(
        "–®–∞–≥ 2 –∏–∑ 8\n"
        "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–ª–æ–≥–µ—Ä–∞ (–∫–∞–Ω–∞–ª, –ø—Ä–æ—Ñ–∏–ª—å):"
    )
    await state.set_state(SellerStates.waiting_for_blogger_url)


@router.message(SellerStates.waiting_for_blogger_url)
async def process_blogger_url(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –±–ª–æ–≥–µ—Ä–∞"""
    await state.update_data(url=message.text)
    
    await message.answer(
        "–®–∞–≥ 3 –∏–∑ 8\n"
        "üì± –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –±–ª–æ–≥–µ—Ä–∞:",
        reply_markup=get_platform_keyboard()
    )
    await state.set_state(SellerStates.waiting_for_blogger_platform)


@router.callback_query(F.data.startswith("platform_"), SellerStates.waiting_for_blogger_platform)
async def process_blogger_platform(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    platform = callback.data.split("_")[1]
    
    if platform == "other":
        await callback.answer()
        await callback.message.edit_text(
            "–®–∞–≥ 3 –∏–∑ 8\n"
            "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:"
        )
        return
    
    await state.update_data(platform=platform)
    await callback.answer()
    
    await callback.message.edit_text(
        "–®–∞–≥ 4 –∏–∑ 8\n"
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª–æ–≥–µ—Ä–∞:",
        reply_markup=get_category_keyboard()
    )
    await state.set_state(SellerStates.waiting_for_blogger_category)


@router.callback_query(F.data.startswith("category_"), SellerStates.waiting_for_blogger_category)
async def process_blogger_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
    category = callback.data.split("_", 1)[1]
    
    if category == "other":
        await callback.answer()
        await callback.message.edit_text(
            "–®–∞–≥ 4 –∏–∑ 8\n"
            "üéØ –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª–æ–≥–∞:"
        )
        return
    
    await state.update_data(category=category)
    await callback.answer()
    
    await callback.message.edit_text(
        "–®–∞–≥ 5 –∏–∑ 8\n"
        "üë• –û–ø–∏—à–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –±–ª–æ–≥–µ—Ä–∞:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–ñ–µ–Ω—â–∏–Ω—ã 25-35 –ª–µ—Ç, –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ—Å—è –∑–¥–æ—Ä–æ–≤—å–µ–º'"
    )
    await state.set_state(SellerStates.waiting_for_blogger_audience)


@router.message(SellerStates.waiting_for_blogger_audience)
async def process_blogger_audience(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    await state.update_data(target_audience=message.text)
    
    await message.answer(
        "–®–∞–≥ 6 –∏–∑ 8\n"
        "üó£Ô∏è –ï—Å—Ç—å –ª–∏ —É –±–ª–æ–≥–µ—Ä–∞ –æ—Ç–∑—ã–≤—ã –æ—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π?",
        reply_markup=get_yes_no_keyboard("reviews")
    )
    await state.set_state(SellerStates.waiting_for_blogger_reviews)


@router.callback_query(F.data.startswith("yes_reviews") | F.data.startswith("no_reviews"), 
                      SellerStates.waiting_for_blogger_reviews)
async def process_blogger_reviews(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Ç–∑—ã–≤–æ–≤"""
    has_reviews = callback.data.startswith("yes_")
    await state.update_data(has_reviews=has_reviews)
    
    await callback.answer()
    await callback.message.edit_text(
        "–®–∞–≥ 7 –∏–∑ 8\n"
        "üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ —Ä–µ–∫–ª–∞–º—É (–≤ —Ä—É–±–ª—è—Ö):\n"
        "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '0' –µ—Å–ª–∏ —Ü–µ–Ω–∞ –¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è:"
    )
    await state.set_state(SellerStates.waiting_for_blogger_price_min)


@router.message(SellerStates.waiting_for_blogger_price_min)
async def process_blogger_price_min(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
    try:
        price_min = int(message.text)
        await state.update_data(price_min=price_min if price_min > 0 else None)
        
        await message.answer(
            "–®–∞–≥ 8 –∏–∑ 8\n"
            "üí∞ –í–≤–µ–¥–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É –∑–∞ —Ä–µ–∫–ª–∞–º—É (–≤ —Ä—É–±–ª—è—Ö):\n"
            "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '0' –µ—Å–ª–∏ —Ü–µ–Ω–∞ –¥–æ–≥–æ–≤–æ—Ä–Ω–∞—è:"
        )
        await state.set_state(SellerStates.waiting_for_blogger_price_max)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


@router.message(SellerStates.waiting_for_blogger_price_max)
async def process_blogger_price_max(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Ü–µ–Ω—ã"""
    try:
        price_max = int(message.text)
        await state.update_data(price_max=price_max if price_max > 0 else None)
        
        await message.answer(
            "–§–∏–Ω–∞–ª—å–Ω—ã–π —à–∞–≥!\n"
            "üìù –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n"
            "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å:"
        )
        await state.set_state(SellerStates.waiting_for_blogger_description)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")


@router.message(SellerStates.waiting_for_blogger_description)
async def process_blogger_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞"""
    description = message.text if message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None
    
    data = await state.get_data()
    user = await get_user(message.from_user.id)
    
    # –°–æ–∑–¥–∞–µ–º –±–ª–æ–≥–µ—Ä–∞
    blogger = await create_blogger(
        seller_id=user.id,
        name=data['name'],
        url=data['url'],
        platform=data['platform'],
        category=data['category'],
        target_audience=data['target_audience'],
        has_reviews=data['has_reviews'],
        price_min=data.get('price_min'),
        price_max=data.get('price_max'),
        description=description
    )
    
    await message.answer(
        f"‚úÖ <b>–ë–ª–æ–≥–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        f"üìù <b>–ò–º—è:</b> {blogger.name}\n"
        f"üì± <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {blogger.platform}\n"
        f"üéØ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {blogger.category}\n"
        f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {blogger.target_audience}\n"
        f"üó£Ô∏è <b>–û—Ç–∑—ã–≤—ã:</b> {'–ï—Å—Ç—å' if blogger.has_reviews else '–ù–µ—Ç'}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {blogger.price_min or '–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è'}"
        + (f" - {blogger.price_max}" if blogger.price_max else "") + " ‚ÇΩ",
        parse_mode="HTML"
    )
    
    await state.clear()


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–†–ï–†–´–í–ê–ù–ò–Ø –ü–†–û–¶–ï–°–°–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ë–õ–û–ì–ï–†–ê ===

@router.message(F.text == "üìù –ú–æ–∏ –±–ª–æ–≥–µ—Ä—ã", SellerStates())
async def interrupt_with_my_bloggers(message: Message, state: FSMContext):
    """–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ø–∏—Å–∫—É –±–ª–æ–≥–µ—Ä–æ–≤"""
    await state.clear()
    await show_my_bloggers(message)


@router.message(F.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", SellerStates())
async def interrupt_with_subscription(message: Message, state: FSMContext):
    """–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–µ"""
    await state.clear()
    await message.answer(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–∑–¥–µ–ª—É –ø–æ–¥–ø–∏—Å–∫–∏..."
    )
    # –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ handlers/subscription.py


@router.message(F.text == "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", SellerStates())
async def interrupt_with_subscription_management(message: Message, state: FSMContext):
    """–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    await state.clear()
    await message.answer(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–æ–π..."
    )
    # –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ handlers/subscription.py


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", SellerStates())
async def interrupt_with_settings(message: Message, state: FSMContext):
    """–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    await state.clear()
    await message.answer(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º..."
    )
    # –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ handlers/common.py


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", SellerStates())
async def interrupt_with_statistics(message: Message, state: FSMContext):
    """–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
    await state.clear()
    await message.answer(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ..."
    )
    # –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ handlers/subscription.py


@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞", SellerStates())
async def restart_add_blogger(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–∞ –µ—Å–ª–∏ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    await state.clear()
    await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞...")
    await add_blogger_start(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
@router.message(F.text.in_({"‚ùå –û—Ç–º–µ–Ω–∞", "/cancel", "–æ—Ç–º–µ–Ω–∞", "–û—Ç–º–µ–Ω–∞"}), SellerStates())
async def cancel_adding_blogger(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–∞"""
    await state.clear()
    await message.answer(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏."
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –≤ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ö
@router.callback_query(F.data == "cancel_action", SellerStates())
async def cancel_action_callback(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    await state.clear()
    await callback.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.edit_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏."
    )


@router.message(F.text == "üìù –ú–æ–∏ –±–ª–æ–≥–µ—Ä—ã")
async def show_my_bloggers(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª–æ–≥–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await get_user(message.from_user.id)
    if not user or user.role != UserRole.SELLER:
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞–º.")
        return
    
    bloggers = await get_user_bloggers(user.id)
    
    if not bloggers:
        await message.answer(
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞' –¥–ª—è –Ω–∞—á–∞–ª–∞."
        )
        return
    
    await message.answer(
        f"üìù <b>–í–∞—à–∏ –±–ª–æ–≥–µ—Ä—ã ({len(bloggers)}):</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–≥–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=get_blogger_list_keyboard(bloggers),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("blogger_"))
async def show_blogger_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –±–ª–æ–≥–µ—Ä–∞"""
    blogger_id = int(callback.data.split("_")[1])
    blogger = await get_blogger(blogger_id)
    
    if not blogger:
        await callback.answer("‚ùå –ë–ª–æ–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –±–ª–æ–≥–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(callback.from_user.id)
    if not user or blogger.seller_id != user.id:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–ª–æ–≥–µ—Ä—É")
        return
    
    details_text = (
        f"üìù <b>–î–µ—Ç–∞–ª–∏ –±–ª–æ–≥–µ—Ä–∞</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {blogger.name}\n"
        f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {blogger.url}\n"
        f"üì± <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {blogger.platform}\n"
        f"üéØ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {blogger.category}\n"
        f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {blogger.target_audience}\n"
        f"üó£Ô∏è <b>–û—Ç–∑—ã–≤—ã:</b> {'–ï—Å—Ç—å' if blogger.has_reviews else '–ù–µ—Ç'}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {blogger.price_min or '–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è'}"
        + (f" - {blogger.price_max}" if blogger.price_max else "") + " ‚ÇΩ\n"
        f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {blogger.created_at.strftime('%d.%m.%Y')}"
    )
    
    if blogger.description:
        details_text += f"\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {blogger.description}"
    
    await callback.answer()
    await callback.message.edit_text(
        details_text,
        reply_markup=get_blogger_details_keyboard(blogger_id),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("delete_blogger_"))
async def confirm_delete_blogger(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞"""
    blogger_id = int(callback.data.split("_")[2])
    
    await callback.answer()
    await callback.message.edit_text(
        "üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –±–ª–æ–≥–µ—Ä–∞?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=get_yes_no_keyboard(f"delete_confirm_{blogger_id}")
    )


@router.callback_query(F.data.startswith("yes_delete_confirm_"))
async def delete_blogger_confirmed(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    blogger_id = int(callback.data.split("_")[3])
    user = await get_user(callback.from_user.id)
    
    success = await delete_blogger(blogger_id, user.id)
    
    if success:
        await callback.answer("‚úÖ –ë–ª–æ–≥–µ—Ä —É–¥–∞–ª–µ–Ω")
        await callback.message.edit_text("‚úÖ –ë–ª–æ–≥–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã.")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")


@router.callback_query(F.data.startswith("no_delete_confirm_"))
async def cancel_delete_blogger(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞"""
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@router.callback_query(F.data == "back_to_bloggers")
async def back_to_bloggers_list(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –±–ª–æ–≥–µ—Ä–æ–≤"""
    user = await get_user(callback.from_user.id)
    bloggers = await get_user_bloggers(user.id)
    
    await callback.answer()
    await callback.message.edit_text(
        f"üìù <b>–í–∞—à–∏ –±–ª–æ–≥–µ—Ä—ã ({len(bloggers)}):</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–≥–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=get_blogger_list_keyboard(bloggers),
        parse_mode="HTML"
    )


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ë–õ–û–ì–ï–†–ê ===

@router.callback_query(F.data.startswith("edit_blogger_"))
async def start_edit_blogger(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞"""
    blogger_id = int(callback.data.split("_")[2])
    blogger = await get_blogger(blogger_id)
    
    if not blogger:
        await callback.answer("‚ùå –ë–ª–æ–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –±–ª–æ–≥–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(callback.from_user.id)
    if not user or blogger.seller_id != user.id:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–ª–æ–≥–µ—Ä—É")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –±–ª–æ–≥–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(editing_blogger_id=blogger_id)
    await state.set_state(SellerStates.editing_blogger)
    
    edit_menu = (
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞: {blogger.name}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\n\n"
        "1Ô∏è‚É£ –ò–º—è –±–ª–æ–≥–µ—Ä–∞\n"
        "2Ô∏è‚É£ –°—Å—ã–ª–∫–∞ –Ω–∞ –±–ª–æ–≥–µ—Ä–∞\n"
        "3Ô∏è‚É£ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞\n"
        "4Ô∏è‚É£ –ö–∞—Ç–µ–≥–æ—Ä–∏—è\n"
        "5Ô∏è‚É£ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è\n"
        "6Ô∏è‚É£ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞\n"
        "7Ô∏è‚É£ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞\n"
        "8Ô∏è‚É£ –û–ø–∏—Å–∞–Ω–∏–µ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è (1-8) –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞:"
    )
    
    await callback.answer()
    await callback.message.edit_text(edit_menu, parse_mode="HTML")


@router.message(SellerStates.editing_blogger)
async def process_edit_field_selection(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    blogger_id = data.get('editing_blogger_id')
    
    if message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '/cancel']:
        await state.clear()
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    # –ú–∞–ø–ø–∏–Ω–≥ –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ –ø–æ–ª—è
    field_mapping = {
        '1': ('name', '–∏–º—è –±–ª–æ–≥–µ—Ä–∞'),
        '2': ('url', '—Å—Å—ã–ª–∫—É –Ω–∞ –±–ª–æ–≥–µ—Ä–∞'),
        '3': ('platform', '–ø–ª–∞—Ç—Ñ–æ—Ä–º—É'),
        '4': ('category', '–∫–∞—Ç–µ–≥–æ—Ä–∏—é'),
        '5': ('target_audience', '—Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é'),
        '6': ('price_min', '–º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É'),
        '7': ('price_max', '–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É'),
        '8': ('description', '–æ–ø–∏—Å–∞–Ω–∏–µ')
    }
    
    if message.text not in field_mapping:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 8 –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'."
        )
        return
    
    field_name, field_display = field_mapping[message.text]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±–ª–æ–≥–µ—Ä–∞
    blogger = await get_blogger(blogger_id)
    current_value = getattr(blogger, field_name)
    
    await state.update_data(editing_field=field_name)
    await state.set_state(SellerStates.waiting_for_new_value)
    
    await message.answer(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {field_display}</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞:"
    )


@router.message(SellerStates.waiting_for_new_value)
async def process_new_value(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è"""
    if message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '/cancel']:
        await state.clear()
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    data = await state.get_data()
    blogger_id = data.get('editing_blogger_id')
    field_name = data.get('editing_field')
    new_value = message.text
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ü–µ–Ω
    if field_name in ['price_min', 'price_max']:
        try:
            new_value = int(new_value) if new_value != '0' else None
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ '0' –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–Ω–æ–π —Ü–µ–Ω—ã.")
            return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–≥–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = await get_user(message.from_user.id)
    success = await update_blogger(blogger_id, user.id, **{field_name: new_value})
    
    if success:
        await message.answer("‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –±–ª–æ–≥–µ—Ä–∞
        blogger = await get_blogger(blogger_id)
        details_text = (
            f"üìù <b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –±–ª–æ–≥–µ—Ä–∞</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {blogger.name}\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {blogger.url}\n"
            f"üì± <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {blogger.platform}\n"
            f"üéØ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {blogger.category}\n"
            f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {blogger.target_audience}\n"
            f"üó£Ô∏è <b>–û—Ç–∑—ã–≤—ã:</b> {'–ï—Å—Ç—å' if blogger.has_reviews else '–ù–µ—Ç'}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {blogger.price_min or '–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è'}"
            + (f" - {blogger.price_max}" if blogger.price_max else "") + " ‚ÇΩ\n"
            f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {blogger.created_at.strftime('%d.%m.%Y')}"
        )
        
        if blogger.description:
            details_text += f"\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {blogger.description}"
        
        await message.answer(
            details_text,
            reply_markup=get_blogger_details_keyboard(blogger_id),
            parse_mode="HTML"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
    
    await state.clear() 