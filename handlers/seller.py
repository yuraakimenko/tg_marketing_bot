import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from database.database import (
    get_user, create_blogger, get_user_bloggers, 
    get_blogger, delete_blogger, update_blogger
)
from database.models import UserRole, SubscriptionStatus, Platform, BlogCategory
from bot.keyboards import (
    get_platform_keyboard, get_category_keyboard, 
    get_yes_no_keyboard, get_blogger_list_keyboard,
    get_blogger_details_keyboard, get_price_stories_keyboard,
    get_price_post_keyboard, get_price_video_keyboard,
    get_platforms_multi_keyboard # –¥–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç
)
from bot.states import SellerStates

router = Router()
logger = logging.getLogger(__name__)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–°–ù–û–í–ù–û–ì–û –ú–ï–ù–Æ –ü–†–û–î–ê–ñ–ù–ò–ö–ê ===

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞"""
    user = await get_user(message.from_user.id)
    if not user or user.role != UserRole.SELLER:
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞–º.")
        return
    
    subscription_status = "–∞–∫—Ç–∏–≤–Ω–∞" if user.subscription_status == SubscriptionStatus.ACTIVE else "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –±–ª–æ–≥–µ—Ä–æ–≤
    bloggers = await get_user_bloggers(user.id)
    
    stats_text = (
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üë§ <b>–†–æ–ª—å:</b> –ø—Ä–æ–¥–∞–∂–Ω–∏–∫\n"
        f"üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription_status}\n"
        f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {user.rating:.1f}\n"
        f"üìù <b>–û—Ç–∑—ã–≤–æ–≤:</b> {user.reviews_count}\n"
        f"üìÖ <b>–í –±–æ—Ç–µ —Å:</b> {user.created_at.strftime('%d.%m.%Y')}\n"
        f"\nüìù <b>–î–æ–±–∞–≤–ª–µ–Ω–æ –±–ª–æ–≥–µ—Ä–æ–≤:</b> {len(bloggers)}\n"
    )
    
    if user.subscription_end_date:
        stats_text += f"üóìÔ∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:</b> {user.subscription_end_date.strftime('%d.%m.%Y')}"
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –±–ª–æ–≥–µ—Ä–∞–º
    if bloggers:
        platforms = {}
        for blogger in bloggers:
            platforms[blogger.platform] = platforms.get(blogger.platform, 0) + 1
        
        # –¢–æ–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞
        top_platform = max(platforms.items(), key=lambda x: x[1])
        
        stats_text += (
            f"\n\nüéØ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–≥–µ—Ä–æ–≤:</b>\n"
            f"‚Ä¢ –¢–æ–ø –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {top_platform[0]} ({top_platform[1]})\n"
            f"‚Ä¢ –° –æ—Ç–∑—ã–≤–∞–º–∏: {sum(1 for b in bloggers if b.has_reviews)}\n"
            f"‚Ä¢ –ë–µ–∑ –æ—Ç–∑—ã–≤–æ–≤: {sum(1 for b in bloggers if not b.has_reviews)}"
        )
    
    await message.answer(stats_text, parse_mode="HTML")


@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞")
async def add_blogger_start(message: Message, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ (–Ω–æ–≤—ã–π –ø–æ—Ä—è–¥–æ–∫: —Å–Ω–∞—á–∞–ª–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞)"""
    user = await get_user(message.from_user.id)
    if not user or user.role != UserRole.SELLER:
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞–º.")
        return
    
    if user.subscription_status != SubscriptionStatus.ACTIVE:
        await message.answer(
            "‚ùå –î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n"
            "üí≥ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–¥–ø–∏—Å–∫–∞'."
        )
        return
    
    await message.answer(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞</b>\n\n"
        "–®–∞–≥ 1 –∏–∑ 15\n"
        "üì± –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –±–ª–æ–≥–µ—Ä–∞ (–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ):",
        reply_markup=get_platforms_multi_keyboard(),
        parse_mode="HTML"
    )
    await state.update_data(platforms=[])
    await state.set_state(SellerStates.waiting_for_platform)


@router.callback_query(F.data.startswith("toggle_platform_"), SellerStates.waiting_for_platform)
async def toggle_platform_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞/–æ—Ç–º–µ–Ω—ã –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã"""
    platform_code = callback.data.replace("toggle_platform_", "")
    data = await state.get_data()
    platforms = data.get("platforms", [])
    if platform_code in platforms:
        platforms.remove(platform_code)
    else:
        platforms.append(platform_code)
    await state.update_data(platforms=platforms)
    await callback.answer()
    await callback.message.edit_reply_markup(reply_markup=get_platforms_multi_keyboard(platforms))


@router.callback_query(F.data == "finish_platforms_selection", SellerStates.waiting_for_platform)
async def finish_platforms_selection(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    platforms = data.get("platforms", [])
    if not platforms:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É")
        return
    await callback.answer()
    await callback.message.edit_text(
        "–®–∞–≥ 2 –∏–∑ 15\n"
        "üîó –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –±–ª–æ–≥–µ—Ä–∞ (—á–∏—Å—Ç—É—é, –±–µ–∑ —Å–∏–º–≤–æ–ª–æ–≤ –ø–æ—Å–ª–µ –Ω–∏–∫–∞):\n\n"
        "<b>–ü—Ä–∏–º–µ—Ä: https://instagram.com/username</b>",
        parse_mode="HTML"
    )
    await state.set_state(SellerStates.waiting_for_blogger_url)


@router.message(SellerStates.waiting_for_blogger_url)
async def process_blogger_url(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏ –±–ª–æ–≥–µ—Ä–∞"""
    await state.update_data(url=message.text)
    
    await message.answer(
        "–®–∞–≥ 3 –∏–∑ 15\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–ª–æ–≥–µ—Ä–∞:"
    )
    await state.set_state(SellerStates.waiting_for_blogger_name)


@router.message(SellerStates.waiting_for_blogger_name)
async def process_blogger_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –±–ª–æ–≥–µ—Ä–∞"""
    await state.update_data(name=message.text)
    
    await message.answer(
        "–®–∞–≥ 4 –∏–∑ 15\n"
        "üë• –î–µ–º–æ–≥—Ä–∞—Ñ–∏—è –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n\n"
        "–£–∫–∞–∂–∏—Ç–µ % –∞—É–¥–∏—Ç–æ—Ä–∏–∏ 13-17 –ª–µ—Ç:\n"
        "(–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100)"
    )
    await state.set_state(SellerStates.waiting_for_audience_13_17)


@router.message(SellerStates.waiting_for_audience_13_17)
async def process_audience_13_17(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ % –∞—É–¥–∏—Ç–æ—Ä–∏–∏ 13-17 –ª–µ—Ç"""
    try:
        percent = int(message.text)
        if percent < 0 or percent > 100:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100")
            return
        
        await state.update_data(audience_13_17_percent=percent)
        
        await message.answer(
            "–®–∞–≥ 5 –∏–∑ 15\n"
            "üë• –£–∫–∞–∂–∏—Ç–µ % –∞—É–¥–∏—Ç–æ—Ä–∏–∏ 18-24 –ª–µ—Ç:\n"
            "(–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100)"
        )
        await state.set_state(SellerStates.waiting_for_audience_18_24)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


@router.message(SellerStates.waiting_for_audience_18_24)
async def process_audience_18_24(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ % –∞—É–¥–∏—Ç–æ—Ä–∏–∏ 18-24 –ª–µ—Ç"""
    try:
        percent = int(message.text)
        if percent < 0 or percent > 100:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100")
            return
        
        await state.update_data(audience_18_24_percent=percent)
        
        await message.answer(
            "–®–∞–≥ 6 –∏–∑ 15\n"
            "üë• –£–∫–∞–∂–∏—Ç–µ % –∞—É–¥–∏—Ç–æ—Ä–∏–∏ 25-35 –ª–µ—Ç:\n"
            "(–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100)"
        )
        await state.set_state(SellerStates.waiting_for_audience_25_35)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


@router.message(SellerStates.waiting_for_audience_25_35)
async def process_audience_25_35(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ % –∞—É–¥–∏—Ç–æ—Ä–∏–∏ 25-35 –ª–µ—Ç"""
    try:
        percent = int(message.text)
        if percent < 0 or percent > 100:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100")
            return
        
        await state.update_data(audience_25_35_percent=percent)
        
        await message.answer(
            "–®–∞–≥ 7 –∏–∑ 15\n"
            "üë• –£–∫–∞–∂–∏—Ç–µ % –∞—É–¥–∏—Ç–æ—Ä–∏–∏ 35+ –ª–µ—Ç:\n"
            "(–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100)"
        )
        await state.set_state(SellerStates.waiting_for_audience_35_plus)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


@router.message(SellerStates.waiting_for_audience_35_plus)
async def process_audience_35_plus(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ % –∞—É–¥–∏—Ç–æ—Ä–∏–∏ 35+ –ª–µ—Ç"""
    try:
        percent = int(message.text)
        if percent < 0 or percent > 100:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100")
            return
        
        await state.update_data(audience_35_plus_percent=percent)
        
        await message.answer(
            "–®–∞–≥ 8 –∏–∑ 15\n"
            "üë• –ü–æ–ª –∞—É–¥–∏—Ç–æ—Ä–∏–∏\n\n"
            "–£–∫–∞–∂–∏—Ç–µ % –∂–µ–Ω—Å–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏:\n"
            "(–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100)"
        )
        await state.set_state(SellerStates.waiting_for_female_percent)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


@router.message(SellerStates.waiting_for_female_percent)
async def process_female_percent(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ % –∂–µ–Ω—Å–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    try:
        percent = int(message.text)
        if percent < 0 or percent > 100:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100")
            return
        
        await state.update_data(female_percent=percent)
        
        await message.answer(
            "–®–∞–≥ 9 –∏–∑ 15\n"
            "üë• –£–∫–∞–∂–∏—Ç–µ % –º—É–∂—Å–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏:\n"
            "(–≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100)"
        )
        await state.set_state(SellerStates.waiting_for_male_percent)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


@router.message(SellerStates.waiting_for_male_percent)
async def process_male_percent(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ % –º—É–∂—Å–∫–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    try:
        percent = int(message.text)
        if percent < 0 or percent > 100:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100")
            return
        
        await state.update_data(male_percent=percent)
        
        await message.answer(
            "–®–∞–≥ 10 –∏–∑ 15\n"
            "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –±–ª–æ–≥–∞:",
            reply_markup=get_category_keyboard()
        )
        await state.set_state(SellerStates.waiting_for_categories)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


@router.callback_query(F.data.startswith("category_"), SellerStates.waiting_for_categories)
async def process_categories(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    category_str = callback.data.split("_", 1)[1]
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ enum
    category_map = {
        "lifestyle": BlogCategory.LIFESTYLE,
        "sport": BlogCategory.SPORT,
        "nutrition": BlogCategory.NUTRITION,
        "medicine": BlogCategory.MEDICINE,
        "relationships": BlogCategory.RELATIONSHIPS,
        "beauty": BlogCategory.BEAUTY,
        "fashion": BlogCategory.FASHION,
        "travel": BlogCategory.TRAVEL,
        "business": BlogCategory.BUSINESS,
        "education": BlogCategory.EDUCATION,
        "entertainment": BlogCategory.ENTERTAINMENT,
        "technology": BlogCategory.TECHNOLOGY,
        "parenting": BlogCategory.PARENTING,
        "finance": BlogCategory.FINANCE,
        "not_important": BlogCategory.NOT_IMPORTANT
    }
    
    if category_str not in category_map:
        await callback.answer("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è")
        return
    
    category = category_map[category_str]
    await state.update_data(categories=[category])
    await callback.answer()
    
    await callback.message.edit_text(
        "–®–∞–≥ 11 –∏–∑ 15\n"
        "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ 4 –∏—Å—Ç–æ—Ä–∏–∏ (–∫—Ä–∞—Ç–Ω—É—é 1000):",
        reply_markup=get_price_stories_keyboard()
    )
    await state.set_state(SellerStates.waiting_for_price_stories)


@router.callback_query(F.data.startswith("price_stories_"), SellerStates.waiting_for_price_stories)
async def process_price_stories(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –∑–∞ 4 –∏—Å—Ç–æ—Ä–∏–∏"""
    price_str = callback.data.split("_")[2]
    
    if price_str == "custom":
        await callback.answer()
        await callback.message.edit_text(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ 4 –∏—Å—Ç–æ—Ä–∏–∏ (–∫—Ä–∞—Ç–Ω—É—é 1000):\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 4000, 10000, 20000"
        )
        return
    
    try:
        price = int(price_str)
        await state.update_data(price_stories=price)
        await callback.answer()
        
        await callback.message.edit_text(
            "–®–∞–≥ 12 –∏–∑ 15\n"
            "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –ø–æ—Å—Ç (–∫—Ä–∞—Ç–Ω—É—é 1000):",
            reply_markup=get_price_post_keyboard()
        )
        await state.set_state(SellerStates.waiting_for_price_post)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞")


@router.callback_query(F.data.startswith("price_post_"), SellerStates.waiting_for_price_post)
async def process_price_post(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å—Ç"""
    price_str = callback.data.split("_")[2]
    
    if price_str == "custom":
        await callback.answer()
        await callback.message.edit_text(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –ø–æ—Å—Ç (–∫—Ä–∞—Ç–Ω—É—é 1000):\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 4000, 10000, 20000"
        )
        return
    
    try:
        price = int(price_str)
        await state.update_data(price_post=price)
        await callback.answer()
        
        await callback.message.edit_text(
            "–®–∞–≥ 13 –∏–∑ 15\n"
            "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –≤–∏–¥–µ–æ (–∫—Ä–∞—Ç–Ω—É—é 1000):",
            reply_markup=get_price_video_keyboard()
        )
        await state.set_state(SellerStates.waiting_for_price_video)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞")


@router.callback_query(F.data.startswith("price_video_"), SellerStates.waiting_for_price_video)
async def process_price_video(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–Ω—ã –∑–∞ –≤–∏–¥–µ–æ"""
    price_str = callback.data.split("_")[2]
    
    if price_str == "custom":
        await callback.answer()
        await callback.message.edit_text(
            "üí∞ –í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –≤–∏–¥–µ–æ (–∫—Ä–∞—Ç–Ω—É—é 1000):\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 4000, 10000, 20000"
        )
        return
    
    try:
        price = int(price_str)
        await state.update_data(price_video=price)
        await callback.answer()
        
        await callback.message.edit_text(
            "–®–∞–≥ 14 –∏–∑ 15\n"
            "üó£Ô∏è –ï—Å—Ç—å –ª–∏ —É –±–ª–æ–≥–µ—Ä–∞ –æ—Ç–∑—ã–≤—ã –æ—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π?",
            reply_markup=get_yes_no_keyboard("reviews")
        )
        await state.set_state(SellerStates.waiting_for_has_reviews)
    except ValueError:
        await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Ü–µ–Ω–∞")


@router.callback_query(F.data.startswith("yes_reviews") | F.data.startswith("no_reviews"), 
                      SellerStates.waiting_for_has_reviews)
async def process_has_reviews(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ—Ç–∑—ã–≤–æ–≤"""
    has_reviews = callback.data.startswith("yes_")
    await state.update_data(has_reviews=has_reviews)
    
    await callback.answer()
    await callback.message.edit_text(
        "–®–∞–≥ 15 –∏–∑ 15\n"
        "üìù –í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):\n"
        "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å:"
    )
    await state.set_state(SellerStates.waiting_for_blogger_description)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ê–°–¢–û–ú–ù–´–• –¶–ï–ù ===

@router.message(SellerStates.waiting_for_price_stories)
async def process_custom_price_stories(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ü–µ–Ω—ã –∑–∞ 4 –∏—Å—Ç–æ—Ä–∏–∏"""
    try:
        price = int(message.text)
        if price % 1000 != 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–∞ 1000")
            return
        
        await state.update_data(price_stories=price)
        
        await message.answer(
            "–®–∞–≥ 12 –∏–∑ 15\n"
            "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –ø–æ—Å—Ç (–∫—Ä–∞—Ç–Ω—É—é 1000):",
            reply_markup=get_price_post_keyboard()
        )
        await state.set_state(SellerStates.waiting_for_price_post)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


@router.message(SellerStates.waiting_for_price_post)
async def process_custom_price_post(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ü–µ–Ω—ã –∑–∞ –ø–æ—Å—Ç"""
    try:
        price = int(message.text)
        if price % 1000 != 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–∞ 1000")
            return
        
        await state.update_data(price_post=price)
        
        await message.answer(
            "–®–∞–≥ 13 –∏–∑ 15\n"
            "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –≤–∏–¥–µ–æ (–∫—Ä–∞—Ç–Ω—É—é 1000):",
            reply_markup=get_price_video_keyboard()
        )
        await state.set_state(SellerStates.waiting_for_price_video)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


@router.message(SellerStates.waiting_for_price_video)
async def process_custom_price_video(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–∞—Å—Ç–æ–º–Ω–æ–π —Ü–µ–Ω—ã –∑–∞ –≤–∏–¥–µ–æ"""
    try:
        price = int(message.text)
        if price % 1000 != 0:
            await message.answer("‚ùå –¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∫—Ä–∞—Ç–Ω–∞ 1000")
            return
        
        await state.update_data(price_video=price)
        
        await message.answer(
            "–®–∞–≥ 14 –∏–∑ 15\n"
            "üó£Ô∏è –ï—Å—Ç—å –ª–∏ —É –±–ª–æ–≥–µ—Ä–∞ –æ—Ç–∑—ã–≤—ã –æ—Ç —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª–µ–π?",
            reply_markup=get_yes_no_keyboard("reviews")
        )
        await state.set_state(SellerStates.waiting_for_has_reviews)
    except ValueError:
        await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ")


# === –§–ò–ù–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–ó–î–ê–ù–ò–Ø –ë–õ–û–ì–ï–†–ê ===

@router.message(SellerStates.waiting_for_blogger_description)
async def process_blogger_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞"""
    description = message.text if message.text.lower() != "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å" else None
    
    data = await state.get_data()
    user = await get_user(message.from_user.id)
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    age_total = (
        data.get('audience_13_17_percent', 0) +
        data.get('audience_18_24_percent', 0) +
        data.get('audience_25_35_percent', 0) +
        data.get('audience_35_plus_percent', 0)
    )
    
    if age_total != 100:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏!</b>\n\n"
            f"–°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –≤–æ–∑—Ä–∞—Å—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100%.\n"
            f"–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: {age_total}%\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML"
        )
        return
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ –ø–æ–ª—É
    gender_total = data.get('female_percent', 0) + data.get('male_percent', 0)
    if gender_total != 100:
        await message.answer(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏!</b>\n\n"
            f"–°—É–º–º–∞ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –ø–æ –ø–æ–ª—É –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 100%.\n"
            f"–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: {gender_total}%\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø—Ä–∞–≤—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML"
        )
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –≤ enum
    platforms = []
    for platform_code in data.get('platforms', []):
        try:
            platforms.append(Platform(platform_code))
        except ValueError:
            await message.answer(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞: {platform_code}")
            return
    
    # –°–æ–∑–¥–∞–µ–º –±–ª–æ–≥–µ—Ä–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–æ–ª—è–º–∏
    blogger = await create_blogger(
        seller_id=user.id,
        name=data['name'],
        url=data['url'],
        platforms=platforms,
        categories=data['categories'],
        audience_13_17_percent=data['audience_13_17_percent'],
        audience_18_24_percent=data['audience_18_24_percent'],
        audience_25_35_percent=data['audience_25_35_percent'],
        audience_35_plus_percent=data['audience_35_plus_percent'],
        female_percent=data['female_percent'],
        male_percent=data['male_percent'],
        price_stories=data['price_stories'],
        price_post=data['price_post'],
        price_video=data['price_video'],
        has_reviews=data['has_reviews'],
        description=description
    )
    
    # –õ–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets
    from utils.google_sheets import log_blogger_action_to_sheets
    
    user_data = {
        'username': user.username,
        'role': user.role.value,
        'subscription_start_date': user.subscription_start_date,
        'subscription_end_date': user.subscription_end_date
    }
    
    blogger_data = {
        'name': blogger.name,
        'url': blogger.url,
        'platforms': [p.value for p in blogger.platforms],
        'audience_13_17_percent': blogger.audience_13_17_percent,
        'audience_18_24_percent': blogger.audience_18_24_percent,
        'audience_25_35_percent': blogger.audience_25_35_percent,
        'audience_35_plus_percent': blogger.audience_35_plus_percent
    }
    
    await log_blogger_action_to_sheets(user_data, blogger_data, "add")
    
    await message.answer(
        f"‚úÖ <b>–ë–ª–æ–≥–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        f"üìù <b>–ò–º—è:</b> {blogger.name}\n"
        f"üì± <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã:</b> {', '.join([p.value for p in blogger.platforms])}\n"
        f"üéØ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {', '.join([cat.value for cat in blogger.categories])}\n"
        f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {blogger.female_percent}%‚ôÄÔ∏è {blogger.male_percent}%‚ôÇÔ∏è\n"
        f"üìä <b>–í–æ–∑—Ä–∞—Å—Ç–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {blogger.get_age_categories_summary()}\n"
        f"üó£Ô∏è <b>–û—Ç–∑—ã–≤—ã:</b> {'–ï—Å—Ç—å' if blogger.has_reviews else '–ù–µ—Ç'}\n"
        f"üí∞ <b>–¶–µ–Ω—ã:</b>\n"
        f"‚Ä¢ 4 –∏—Å—Ç–æ—Ä–∏–∏: {blogger.price_stories}‚ÇΩ\n"
        f"‚Ä¢ –ü–æ—Å—Ç: {blogger.price_post}‚ÇΩ\n"
        f"‚Ä¢ –í–∏–¥–µ–æ: {blogger.price_video}‚ÇΩ",
        parse_mode="HTML"
    )
    
    await state.clear()


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–†–ï–†–´–í–ê–ù–ò–Ø –ü–†–û–¶–ï–°–°–ê –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ë–õ–û–ì–ï–†–ê ===

@router.message(F.text == "üìù –ú–æ–∏ –±–ª–æ–≥–µ—Ä—ã", SellerStates())
async def interrupt_with_my_bloggers(message: Message, state: FSMContext):
    """–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ø–∏—Å–∫—É –±–ª–æ–≥–µ—Ä–æ–≤"""
    await state.clear()
    await show_my_bloggers(message)


@router.message(F.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", SellerStates())
async def interrupt_with_subscription(message: Message, state: FSMContext):
    """–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–µ"""
    await state.clear()
    await message.answer(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–∑–¥–µ–ª—É –ø–æ–¥–ø–∏—Å–∫–∏..."
    )
    # –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ handlers/subscription.py


@router.message(F.text == "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", SellerStates())
async def interrupt_with_subscription_management(message: Message, state: FSMContext):
    """–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    await state.clear()
    await message.answer(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–æ–π..."
    )
    # –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ handlers/subscription.py


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", SellerStates())
async def interrupt_with_settings(message: Message, state: FSMContext):
    """–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    await state.clear()
    await message.answer(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º..."
    )
    # –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ handlers/common.py


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", SellerStates())
async def interrupt_with_statistics(message: Message, state: FSMContext):
    """–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
    await state.clear()
    await message.answer(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ..."
    )
    # –ë—É–¥–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –≤ handlers/subscription.py


@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞", SellerStates())
async def restart_add_blogger(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–∞ –µ—Å–ª–∏ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    await state.clear()
    await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞...")
    await add_blogger_start(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
@router.message(F.text.in_({"‚ùå –û—Ç–º–µ–Ω–∞", "/cancel", "–æ—Ç–º–µ–Ω–∞", "–û—Ç–º–µ–Ω–∞"}), SellerStates())
async def cancel_adding_blogger(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–∞"""
    await state.clear()
    await message.answer(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏."
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –≤ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ö
@router.callback_query(F.data == "cancel_action", SellerStates())
async def cancel_action_callback(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    await state.clear()
    await callback.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.edit_text(
        "‚ùå –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏."
    )


@router.message(F.text == "üìù –ú–æ–∏ –±–ª–æ–≥–µ—Ä—ã")
async def show_my_bloggers(message: Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª–æ–≥–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = await get_user(message.from_user.id)
    if not user or user.role != UserRole.SELLER:
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞–º.")
        return
    
    bloggers = await get_user_bloggers(user.id)
    
    if not bloggers:
        await message.answer(
            "üìù –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞' –¥–ª—è –Ω–∞—á–∞–ª–∞."
        )
        return
    
    await message.answer(
        f"üìù <b>–í–∞—à–∏ –±–ª–æ–≥–µ—Ä—ã ({len(bloggers)}):</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–≥–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=get_blogger_list_keyboard(bloggers),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("blogger_"))
async def show_blogger_details(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –±–ª–æ–≥–µ—Ä–∞"""
    try:
        blogger_id = int(callback.data.split("_")[1])
        blogger = await get_blogger(blogger_id)
        if not blogger:
            await callback.answer("‚ùå –ë–ª–æ–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        user = await get_user(callback.from_user.id)
        if not user or blogger.seller_id != user.id:
            await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–ª–æ–≥–µ—Ä—É")
            return
        # –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã
        platforms_str = blogger.get_platforms_summary()
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
        categories = blogger.categories if hasattr(blogger, 'categories') else []
        categories_str = ", ".join([c.value if hasattr(c, 'value') else str(c) for c in categories])
        # –¶–µ–Ω—ã
        price_stories = getattr(blogger, 'price_stories', None)
        price_post = getattr(blogger, 'price_post', None)
        price_video = getattr(blogger, 'price_video', None)
        price_text = ""
        if price_stories:
            price_text += f"4 –∏—Å—Ç–æ—Ä–∏–∏: {price_stories}‚ÇΩ\n"
        if price_post:
            price_text += f"–ü–æ—Å—Ç: {price_post}‚ÇΩ\n"
        if price_video:
            price_text += f"–í–∏–¥–µ–æ: {price_video}‚ÇΩ\n"
        if not price_text:
            price_text = "–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è"
        # –ê—É–¥–∏—Ç–æ—Ä–∏—è
        female = getattr(blogger, 'female_percent', None)
        male = getattr(blogger, 'male_percent', None)
        audience_str = f"{female or 0}%‚ôÄÔ∏è {male or 0}%‚ôÇÔ∏è"
        details_text = (
            f"üìù <b>–î–µ—Ç–∞–ª–∏ –±–ª–æ–≥–µ—Ä–∞</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {blogger.name}\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {blogger.url}\n"
            f"üì± <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã:</b> {platforms_str}\n"
            f"üéØ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {categories_str}\n"
            f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {audience_str}\n"
            f"üó£Ô∏è <b>–û—Ç–∑—ã–≤—ã:</b> {'–ï—Å—Ç—å' if blogger.has_reviews else '–ù–µ—Ç'}\n"
            f"üí∞ <b>–¶–µ–Ω—ã:</b>\n{price_text}"
            f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {blogger.created_at.strftime('%d.%m.%Y')}"
        )
        if blogger.description:
            details_text += f"\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {blogger.description}"
        await callback.answer()
        await callback.message.edit_text(
            details_text,
            reply_markup=get_blogger_details_keyboard(blogger_id),
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ show_blogger_details: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –±–ª–æ–≥–µ—Ä–∞")
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –±–ª–æ–≥–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@router.callback_query(F.data.startswith("delete_blogger_"))
async def confirm_delete_blogger(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞"""
    blogger_id = int(callback.data.split("_")[2])
    
    await callback.answer()
    await callback.message.edit_text(
        "üóëÔ∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –±–ª–æ–≥–µ—Ä–∞?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=get_yes_no_keyboard(f"delete_confirm_{blogger_id}")
    )


@router.callback_query(F.data.startswith("yes_delete_confirm_"))
async def delete_blogger_confirmed(callback: CallbackQuery):
    """–£–¥–∞–ª–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞ –ø–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    blogger_id = int(callback.data.split("_")[3])
    user = await get_user(callback.from_user.id)
    
    success = await delete_blogger(blogger_id, user.id)
    
    if success:
        await callback.answer("‚úÖ –ë–ª–æ–≥–µ—Ä —É–¥–∞–ª–µ–Ω")
        await callback.message.edit_text("‚úÖ –ë–ª–æ–≥–µ—Ä —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã.")
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏")


@router.callback_query(F.data.startswith("no_delete_confirm_"))
async def cancel_delete_blogger(callback: CallbackQuery):
    """–û—Ç–º–µ–Ω–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞"""
    await callback.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.edit_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")


@router.callback_query(F.data == "back_to_bloggers")
async def back_to_bloggers_list(callback: CallbackQuery):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –±–ª–æ–≥–µ—Ä–æ–≤"""
    user = await get_user(callback.from_user.id)
    bloggers = await get_user_bloggers(user.id)
    
    await callback.answer()
    await callback.message.edit_text(
        f"üìù <b>–í–∞—à–∏ –±–ª–æ–≥–µ—Ä—ã ({len(bloggers)}):</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–≥–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π:",
        reply_markup=get_blogger_list_keyboard(bloggers),
        parse_mode="HTML"
    )


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ë–õ–û–ì–ï–†–ê ===

@router.callback_query(F.data.startswith("edit_blogger_"))
async def start_edit_blogger(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞"""
    blogger_id = int(callback.data.split("_")[2])
    blogger = await get_blogger(blogger_id)
    
    if not blogger:
        await callback.answer("‚ùå –ë–ª–æ–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –±–ª–æ–≥–µ—Ä —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await get_user(callback.from_user.id)
    if not user or blogger.seller_id != user.id:
        await callback.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–ª–æ–≥–µ—Ä—É")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –±–ª–æ–≥–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(editing_blogger_id=blogger_id)
    await state.set_state(SellerStates.editing_blogger)
    
    edit_menu = (
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞: {blogger.name}</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:\n\n"
        "1Ô∏è‚É£ –ò–º—è –±–ª–æ–≥–µ—Ä–∞\n"
        "2Ô∏è‚É£ –°—Å—ã–ª–∫–∞ –Ω–∞ –±–ª–æ–≥–µ—Ä–∞\n"
        "3Ô∏è‚É£ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞\n"
        "4Ô∏è‚É£ –ö–∞—Ç–µ–≥–æ—Ä–∏—è\n"
        "5Ô∏è‚É£ –¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è\n"
        "6Ô∏è‚É£ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞\n"
        "7Ô∏è‚É£ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞\n"
        "8Ô∏è‚É£ –û–ø–∏—Å–∞–Ω–∏–µ\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–ª—è (1-8) –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞:"
    )
    
    await callback.answer()
    await callback.message.edit_text(edit_menu, parse_mode="HTML")


@router.message(SellerStates.editing_blogger)
async def process_edit_field_selection(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    data = await state.get_data()
    blogger_id = data.get('editing_blogger_id')
    
    if message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '/cancel']:
        await state.clear()
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    # –ú–∞–ø–ø–∏–Ω–≥ –Ω–æ–º–µ—Ä–æ–≤ –Ω–∞ –ø–æ–ª—è
    field_mapping = {
        '1': ('name', '–∏–º—è –±–ª–æ–≥–µ—Ä–∞'),
        '2': ('url', '—Å—Å—ã–ª–∫—É –Ω–∞ –±–ª–æ–≥–µ—Ä–∞'),
        '3': ('platform', '–ø–ª–∞—Ç—Ñ–æ—Ä–º—É'),
        '4': ('category', '–∫–∞—Ç–µ–≥–æ—Ä–∏—é'),
        '5': ('target_audience', '—Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é'),
        '6': ('price_min', '–º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É'),
        '7': ('price_max', '–º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é —Ü–µ–Ω—É'),
        '8': ('description', '–æ–ø–∏—Å–∞–Ω–∏–µ')
    }
    
    if message.text not in field_mapping:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –æ—Ç 1 –¥–æ 8 –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞'."
        )
        return
    
    field_name, field_display = field_mapping[message.text]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±–ª–æ–≥–µ—Ä–∞
    blogger = await get_blogger(blogger_id)
    current_value = getattr(blogger, field_name)
    
    await state.update_data(editing_field=field_name)
    await state.set_state(SellerStates.waiting_for_new_value)
    
    await message.answer(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {field_display}</b>\n\n"
        f"–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {current_value or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–ª–∏ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞:"
    )


@router.message(SellerStates.waiting_for_new_value)
async def process_new_value(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è"""
    if message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '/cancel']:
        await state.clear()
        await message.answer("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    data = await state.get_data()
    blogger_id = data.get('editing_blogger_id')
    field_name = data.get('editing_field')
    new_value = message.text
    
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ü–µ–Ω
    if field_name in ['price_min', 'price_max']:
        try:
            new_value = int(new_value) if new_value != '0' else None
        except ValueError:
            await message.answer("‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –∏–ª–∏ '0' –¥–ª—è –¥–æ–≥–æ–≤–æ—Ä–Ω–æ–π —Ü–µ–Ω—ã.")
            return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –±–ª–æ–≥–µ—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user = await get_user(message.from_user.id)
    success = await update_blogger(blogger_id, user.id, **{field_name: new_value})
    
    if success:
        await message.answer("‚úÖ –ü–æ–ª–µ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –±–ª–æ–≥–µ—Ä–∞
        blogger = await get_blogger(blogger_id)
        details_text = (
            f"üìù <b>–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–µ—Ç–∞–ª–∏ –±–ª–æ–≥–µ—Ä–∞</b>\n\n"
            f"üë§ <b>–ò–º—è:</b> {blogger.name}\n"
            f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {blogger.url}\n"
            f"üì± <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {', '.join([p.value for p in blogger.platform])} (–º–Ω–æ–∂–µ—Å—Ç–≤–æ)\n" # Display multiple platforms
            f"üéØ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {blogger.category}\n"
            f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {blogger.target_audience}\n"
            f"üó£Ô∏è <b>–û—Ç–∑—ã–≤—ã:</b> {'–ï—Å—Ç—å' if blogger.has_reviews else '–ù–µ—Ç'}\n"
            f"üí∞ <b>–¶–µ–Ω–∞:</b> {blogger.price_min or '–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è'}"
            + (f" - {blogger.price_max}" if blogger.price_max else "") + " ‚ÇΩ\n"
            f"üìÖ <b>–î–æ–±–∞–≤–ª–µ–Ω:</b> {blogger.created_at.strftime('%d.%m.%Y')}"
        )
        
        if blogger.description:
            details_text += f"\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {blogger.description}"
        
        await message.answer(
            details_text,
            reply_markup=get_blogger_details_keyboard(blogger_id),
            parse_mode="HTML"
        )
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.")
    
    await state.clear()


# –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –º–µ–Ω—é –ø—Ä–æ–¥–∞–≤—Ü–∞ (—Ä–∞–±–æ—Ç–∞—é—Ç –∏–∑ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è)
@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞", StateFilter("*"))
async def universal_add_blogger(message: Message, state: FSMContext):
    await state.clear()
    user = await get_user(message.from_user.id)
    if not user or user.role != UserRole.SELLER:
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞–º.")
        return
    from handlers.seller import add_blogger_start
    await add_blogger_start(message, state)

@router.message(F.text == "üìù –ú–æ–∏ –±–ª–æ–≥–µ—Ä—ã", StateFilter("*"))
async def universal_my_bloggers(message: Message, state: FSMContext):
    await state.clear()
    user = await get_user(message.from_user.id)
    if not user or user.role != UserRole.SELLER:
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞–º.")
        return
    from handlers.seller import show_my_bloggers
    await show_my_bloggers(message)

@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", StateFilter("*"))
async def universal_show_statistics_seller(message: Message, state: FSMContext):
    await state.clear()
    user = await get_user(message.from_user.id)
    if not user or user.role != UserRole.SELLER:
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞–º.")
        return
    from handlers.seller import show_statistics
    await show_statistics(message)

@router.message(F.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", StateFilter("*"))
async def universal_subscription_seller(message: Message, state: FSMContext):
    await state.clear()
    from handlers.subscription import subscription_menu
    await subscription_menu(message)

@router.message(F.text == "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", StateFilter("*"))
async def universal_subscription_management_seller(message: Message, state: FSMContext):
    await state.clear()
    from handlers.subscription import subscription_management_menu
    await subscription_management_menu(message)

@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", StateFilter("*"))
async def universal_settings_seller(message: Message, state: FSMContext):
    await state.clear()
    from handlers.common import settings_menu
    await settings_menu(message) 