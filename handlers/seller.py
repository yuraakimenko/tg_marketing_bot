import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from database.database import (
    get_user, create_blogger, get_user_bloggers, 
    get_blogger, delete_blogger, update_blogger
)
from database.models import UserRole, SubscriptionStatus, Platform, BlogCategory
from bot.keyboards import (
    get_platform_keyboard, get_category_keyboard, 
    get_yes_no_keyboard, get_blogger_list_keyboard,
    get_blogger_details_keyboard, get_price_stories_keyboard,
    get_price_post_keyboard, get_price_video_keyboard,
    get_platforms_multi_keyboard, get_blogger_success_keyboard,
    get_blogger_addition_navigation_with_back,
    get_blogger_addition_navigation_first_step,
    get_blogger_edit_field_keyboard,
    get_blogger_success_keyboard_enhanced
)
from bot.states import SellerStates

router = Router()
logger = logging.getLogger(__name__)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–°–ù–û–í–ù–û–ì–û –ú–ï–ù–Æ –ü–†–û–î–ê–ñ–ù–ò–ö–ê ===

@router.message(F.text == "üìù –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞", StateFilter("*"))
async def universal_add_blogger(message: Message, state: FSMContext):
    await state.clear()
    user = await get_user(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–æ–ª–µ–π
    if not user.roles:
        logger.warning(f"–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id} –Ω–µ—Ç —Ä–æ–ª–µ–π! –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å SELLER")
        from database.database import add_user_role
        success = await add_user_role(message.from_user.id, UserRole.SELLER)
        
        if success:
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –Ω–æ–≤–æ–π —Ä–æ–ª—å—é
            user = await get_user(message.from_user.id)
            logger.info(f"‚úÖ –†–æ–ª—å SELLER –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
            await message.answer("‚úÖ –†–æ–ª—å –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –±–ª–æ–≥–µ—Ä–æ–≤.")
        else:
            logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
            await message.answer("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ä–æ–ª—è–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è —Ä–æ–ª–∏.")
            return
    
    if not user.has_role(UserRole.SELLER):
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞–º.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    has_active_subscription = user.subscription_status in [
        SubscriptionStatus.ACTIVE, 
        SubscriptionStatus.AUTO_RENEWAL_OFF, 
        SubscriptionStatus.CANCELLED
    ]
    
    if not has_active_subscription:
        await message.answer(
            "üí≥ <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
            "–î–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: 500‚ÇΩ/–º–µ—Å\n\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ üí≥ –ü–æ–¥–ø–∏—Å–∫–∞",
            parse_mode="HTML"
        )
        return
    
    await message.answer(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞</b>\n\n"
        "–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–≥–æ –±–ª–æ–≥–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "üéØ <b>–®–∞–≥ 1:</b> –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:",
        reply_markup=get_platform_keyboard(with_navigation=True),
        parse_mode="HTML"
    )
    await state.set_state(SellerStates.waiting_for_platform)


@router.message(F.text == "üìã –ú–æ–∏ –±–ª–æ–≥–µ—Ä—ã", StateFilter("*"))
async def universal_my_bloggers(message: Message, state: FSMContext):
    await state.clear()
    user = await get_user(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–æ–ª–µ–π
    if not user.roles:
        from database.database import add_user_role
        success = await add_user_role(message.from_user.id, UserRole.SELLER)
        if success:
            user = await get_user(message.from_user.id)
            await message.answer("‚úÖ –†–æ–ª—å –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
    
    if not user.has_role(UserRole.SELLER):
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞–º.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞.")
        return
    
    bloggers = await get_user_bloggers(user.id)
    
    if not bloggers:
        await message.answer(
            "üìã <b>–ú–æ–∏ –±–ª–æ–≥–µ—Ä—ã</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–≥–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É üìù –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞",
            parse_mode="HTML"
        )
        return
    
    await message.answer(
        f"üìã <b>–ú–æ–∏ –±–ª–æ–≥–µ—Ä—ã</b>\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ –±–ª–æ–≥–µ—Ä–æ–≤: {len(bloggers)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–≥–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
        reply_markup=get_blogger_list_keyboard(bloggers),
        parse_mode="HTML"
    )


@router.message(F.text == "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–≥–µ—Ä–∞", StateFilter("*"))
async def universal_edit_blogger(message: Message, state: FSMContext):
    await state.clear()
    user = await get_user(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
    
    # –ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –µ—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç —Ä–æ–ª–µ–π
    if not user.roles:
        from database.database import add_user_role
        success = await add_user_role(message.from_user.id, UserRole.SELLER)
        if success:
            user = await get_user(message.from_user.id)
            await message.answer("‚úÖ –†–æ–ª—å –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!")
    
    if not user.has_role(UserRole.SELLER):
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞–º.\n\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚Üí –°–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–æ–ª–∏ –ø—Ä–æ–¥–∞–∂–Ω–∏–∫–∞.")
        return
    
    bloggers = await get_user_bloggers(user.id)
    
    if not bloggers:
        await message.answer(
            "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–≥–µ—Ä–∞, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫—É üìù –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞",
            parse_mode="HTML"
        )
        return
    
    await message.answer(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞</b>\n\n"
        f"–ù–∞–π–¥–µ–Ω–æ –±–ª–æ–≥–µ—Ä–æ–≤: {len(bloggers)}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–≥–µ—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=get_blogger_list_keyboard(bloggers, action="edit"),
        parse_mode="HTML"
    )


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ë–õ–û–ì–ï–†–ê ===

@router.callback_query(F.data.startswith("platform_"))
async def handle_platform_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
    platform_str = callback.data.split("_")[1]
    platform = Platform(platform_str)
    
    data = await state.get_data()
    platforms = data.get('platforms', [])
    
    if platform in platforms:
        # –£–±–∏—Ä–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        platforms.remove(platform)
        await callback.answer(f"‚ùå –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ '{platform.value}' —É–±—Ä–∞–Ω–∞")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        platforms.append(platform)
        await callback.answer(f"‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ '{platform.value}' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    
    await state.update_data(platforms=platforms)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    platforms_text = ", ".join([p.value for p in platforms]) if platforms else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
    
    await callback.message.edit_text(
        f"üéØ <b>–®–∞–≥ 1:</b> –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n\n"
        f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: <b>{platforms_text}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –±–ª–æ–≥–µ—Ä–∞:",
        reply_markup=get_platform_keyboard(with_navigation=True),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "confirm_platforms")
async def confirm_platforms(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
    data = await state.get_data()
    platforms = data.get('platforms', [])
    
    if not platforms:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É")
        return
    
    await callback.answer()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    main_platform = platforms[0].value
    await state.update_data(platform=main_platform)
    
    await callback.message.edit_text(
        f"üéØ <b>–®–∞–≥ 2:</b> –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –±–ª–æ–≥–µ—Ä–∞\n\n"
        f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: <b>{', '.join([p.value for p in platforms])}</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:\n"
        "‚Ä¢ Instagram: https://instagram.com/username\n"
        "‚Ä¢ YouTube: https://youtube.com/@channel\n"
        "‚Ä¢ TikTok: https://tiktok.com/@username\n"
        "‚Ä¢ Telegram: https://t.me/username\n"
        "‚Ä¢ VK: https://vk.com/username",
        reply_markup=get_blogger_addition_navigation_with_back(),
        parse_mode="HTML"
    )
    await state.set_state(SellerStates.waiting_for_blogger_url)


@router.message(SellerStates.waiting_for_blogger_url)
async def handle_blogger_url(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ –±–ª–æ–≥–µ—Ä–∞"""
    url = message.text.strip()
    
    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è URL
    if not url.startswith(('http://', 'https://')):
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Å—ã–ª–∫–∏</b>\n\n"
            "–°—Å—ã–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å http:// –∏–ª–∏ https://\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    data = await state.get_data()
    platforms = data.get('platforms', [])
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    platform_validation = {
        'instagram': ['instagram.com/', 'www.instagram.com/'],
        'youtube': ['youtube.com/', 'www.youtube.com/', 'youtu.be/'],
        'tiktok': ['tiktok.com/', 'www.tiktok.com/'],
        'telegram': ['t.me/', 'telegram.me/'],
        'vk': ['vk.com/', 'www.vk.com/', 'm.vk.com/']
    }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º URL –¥–ª—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–π –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    url_valid = False
    for platform in platforms:
        platform_key = platform.value.lower()
        if platform_key in platform_validation:
            valid_domains = platform_validation[platform_key]
            if any(domain in url.lower() for domain in valid_domains):
                url_valid = True
                break
    
    if platforms and not url_valid:
        platform_names = {
            'instagram': 'Instagram',
            'youtube': 'YouTube', 
            'tiktok': 'TikTok',
            'telegram': 'Telegram',
            'vk': 'VK'
        }
        platform_list = [platform_names.get(p.value.lower(), p.value) for p in platforms]
        await message.answer(
            f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º</b>\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: {', '.join(platform_list)}\n"
            f"URL –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –æ–¥–Ω–æ–π –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º.\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(blogger_url=url)
    
    await message.answer(
        "üéØ <b>–®–∞–≥ 3:</b> –í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–ª–æ–≥–µ—Ä–∞\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º –±–ª–æ–≥–µ—Ä–∞:",
        reply_markup=get_blogger_addition_navigation_with_back(),
        parse_mode="HTML"
    )
    await state.set_state(SellerStates.waiting_for_blogger_name)


@router.message(SellerStates.waiting_for_blogger_name)
async def handle_blogger_name(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –±–ª–æ–≥–µ—Ä–∞"""
    name = message.text.strip()
    
    if len(name) < 2:
        await message.answer(
            "‚ùå <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –∏–º—è</b>\n\n"
            "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(blogger_name=name)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ
    await message.answer(
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–≥–µ—Ä–∞</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:",
        reply_markup=get_blogger_addition_navigation_with_back(),
        parse_mode="HTML"
    )
    await state.set_state(SellerStates.waiting_for_subscribers_count)


@router.message(SellerStates.waiting_for_subscribers_count)
async def handle_subscribers_count(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    try:
        count = int(message.text.strip().replace(',', '').replace(' ', ''))
        if count < 0:
            raise ValueError("Negative count")
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15000).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(subscribers_count=count)
    
    await message.answer(
        "üí∞ <b>–¶–µ–Ω–∞ —Å—Ç–æ—Ä–∏—Å</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ —Å—Ç–æ—Ä–∏—Å –≤ —Ä—É–±–ª—è—Ö:",
        reply_markup=get_blogger_addition_navigation_with_back(),
        parse_mode="HTML"
    )
    await state.set_state(SellerStates.waiting_for_price_stories)


@router.message(SellerStates.waiting_for_price_stories)
async def handle_price_stories(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –∑–∞ —Å—Ç–æ—Ä–∏—Å"""
    try:
        price = int(message.text.strip().replace(',', '').replace(' ', ''))
        if price < 0:
            raise ValueError("Negative price")
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 5000).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(price_stories=price)
    
    await message.answer(
        "üí∏ <b>–¶–µ–Ω–∞ —Ä–∏–ª—Å</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ —Ä–∏–ª—Å –≤ —Ä—É–±–ª—è—Ö:",
        reply_markup=get_blogger_addition_navigation_with_back(),
        parse_mode="HTML"
    )
    await state.set_state(SellerStates.waiting_for_price_reels)


@router.message(SellerStates.waiting_for_price_reels)
async def handle_price_reels(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –∑–∞ —Ä–∏–ª—Å"""
    try:
        price = int(message.text.strip().replace(',', '').replace(' ', ''))
        if price < 0:
            raise ValueError("Negative price")
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 8000).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(price_reels=price)
    
    await message.answer(
        "üé¨ <b>–¶–µ–Ω–∞ –≤–∏–¥–µ–æ</b>\n\n"
        "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –≤–∏–¥–µ–æ –≤ —Ä—É–±–ª—è—Ö:",
        reply_markup=get_blogger_addition_navigation_with_back(),
        parse_mode="HTML"
    )
    await state.set_state(SellerStates.waiting_for_price_video)


@router.message(SellerStates.waiting_for_price_video)
async def handle_price_video(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–Ω—ã –∑–∞ –≤–∏–¥–µ–æ"""
    try:
        price = int(message.text.strip().replace(',', '').replace(' ', ''))
        if price < 0:
            raise ValueError("Negative price")
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 15000).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(price_video=price)
    
    await message.answer(
        "üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª–æ–≥–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–∞–∫—Å–∏–º—É–º 3):",
        reply_markup=get_category_keyboard(with_navigation=True),
        parse_mode="HTML"
    )
    await state.set_state(SellerStates.waiting_for_categories)


@router.callback_query(F.data.startswith("category_"), SellerStates.waiting_for_categories)
async def handle_category_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    category_str = callback.data.split("_")[1]
    category = BlogCategory(category_str)
    
    data = await state.get_data()
    categories = data.get('categories', [])
    
    if category in categories:
        # –£–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        categories.remove(category)
        await callback.answer(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.get_russian_name()}' —É–±—Ä–∞–Ω–∞")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if len(categories) >= 3:
            await callback.answer("‚ùå –ú–∞–∫—Å–∏–º—É–º 3 –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
            return
        categories.append(category)
        await callback.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.get_russian_name()}' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    
    await state.update_data(categories=categories)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    categories_text = ", ".join([cat.get_russian_name() for cat in categories]) if categories else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
    
    await callback.message.edit_text(
        f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª–æ–≥–∞</b>\n\n"
        f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>{categories_text}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–∞–∫—Å–∏–º—É–º 3):",
        reply_markup=get_category_keyboard(with_navigation=True),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "confirm_categories", SellerStates.waiting_for_categories)
async def confirm_categories(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    data = await state.get_data()
    categories = data.get('categories', [])
    
    if not categories:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        return
    
    await callback.answer()
    
    await callback.message.edit_text(
        "üìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞</b>\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):",
        reply_markup=get_blogger_addition_navigation_with_back(),
        parse_mode="HTML"
    )
    await state.set_state(SellerStates.waiting_for_blogger_description)


@router.message(SellerStates.waiting_for_blogger_description)
async def handle_blogger_description(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –±–ª–æ–≥–µ—Ä–∞"""
    description = message.text.strip()
    
    if description.lower() in ['–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', 'skip', '–Ω–µ—Ç', 'no']:
        description = None
    
    await state.update_data(description=description)
    
    # –°–æ–∑–¥–∞–µ–º –±–ª–æ–≥–µ—Ä–∞
    data = await state.get_data()
    user = await get_user(message.from_user.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user:
        logger.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω: {message.from_user.id}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    if not user.id:
        logger.error(f"User ID —Ä–∞–≤–Ω–æ None –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.from_user.id}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
            "–ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    required_fields = ['blogger_name', 'blogger_url', 'platforms', 'categories']
    missing_fields = []
    for field in required_fields:
        if field not in data or not data[field]:
            missing_fields.append(field)
            logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ: {field}, –¥–∞–Ω–Ω—ã–µ: {data.get(field)}")
    
    if missing_fields:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: {missing_fields}")
        await message.answer(
            "‚ùå <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö</b>\n\n"
            "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.\n"
            "–ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–∞ –∑–∞–Ω–æ–≤–æ.",
            parse_mode="HTML"
        )
        await state.clear()
        return
    
    try:
        logger.info(f"–°–æ–∑–¥–∞–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.id} —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        logger.info(f"–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã: {data.get('platforms')}, —Ç–∏–ø: {type(data.get('platforms'))}")
        logger.info(f"–ö–∞—Ç–µ–≥–æ—Ä–∏–∏: {data.get('categories')}, —Ç–∏–ø: {type(data.get('categories'))}")
        
        blogger = await create_blogger(
            seller_id=user.id,
            name=data['blogger_name'],
            url=data['blogger_url'],
            platforms=data['platforms'],
            categories=data['categories'],
            price_stories=data.get('price_stories'),
            price_reels=data.get('price_reels'),  # –ú–∞–ø–ø–∏—Ç—Å—è –Ω–∞ price_post
            price_video=data.get('price_video'),
            subscribers_count=data.get('subscribers_count'),
            description=description
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ–º –±–ª–æ–≥–µ—Ä–µ
        success_text = f"‚úÖ <b>–ë–ª–æ–≥–µ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!</b>\n\n"
        success_text += format_full_blogger_info(blogger)
        success_text += f"\nüéâ –¢–µ–ø–µ—Ä—å –±–ª–æ–≥–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫—É–ø—â–∏–∫–∞–º–∏."
        
        await message.answer(
            success_text,
            reply_markup=get_blogger_success_keyboard_enhanced(blogger.id),
            parse_mode="HTML"
        )
        
        await state.clear()
        
    except Exception as e:
        import traceback
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–ª–æ–≥–µ—Ä–∞: {e}")
        logger.error(f"–ü–æ–ª–Ω—ã–π traceback: {traceback.format_exc()}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±–ª–æ–≥–µ—Ä–∞</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )
        await state.clear()


# === –£–ü–†–ê–í–õ–ï–ù–ò–ï –ë–õ–û–ì–ï–†–ê–ú–ò ===

@router.message(F.text == "üë• –ú–æ–∏ –±–ª–æ–≥–µ—Ä—ã", StateFilter("*"))
async def show_my_bloggers(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±–ª–æ–≥–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await state.clear()
    user = await get_user(message.from_user.id)
    
    if not user:
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    bloggers = await get_user_bloggers(user.id)
    
    if not bloggers:
        await message.answer(
            "üìù <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–ª–æ–≥–µ—Ä–æ–≤</b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–≥–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üìù –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞'",
            parse_mode="HTML"
        )
        return
    
    for blogger in bloggers:
        info_text = f"üìù <b>–ë–ª–æ–≥–µ—Ä #{blogger.id}</b>\n\n"
        info_text += format_full_blogger_info(blogger)
        
        await message.answer(
            info_text,
            reply_markup=get_blogger_management_keyboard(blogger.id),
            parse_mode="HTML"
        )


@router.callback_query(F.data.startswith("edit_blogger_"))
async def handle_edit_blogger(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–≥–µ—Ä–∞"""
    blogger_id = int(callback.data.split("_")[2])
    blogger = await get_blogger(blogger_id)
    
    if not blogger:
        await callback.answer("‚ùå –ë–ª–æ–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user = await get_user(callback.from_user.id)
    if blogger.seller_id != user.id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –±–ª–æ–≥–µ—Ä")
        return
    
    await callback.answer()
    
    info_text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞</b>\n\n"
    info_text += format_full_blogger_info(blogger)
    info_text += f"\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    
    await callback.message.edit_text(
        info_text,
        reply_markup=get_edit_blogger_keyboard(blogger.id),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("delete_blogger_"))
async def handle_delete_blogger(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞"""
    blogger_id = int(callback.data.split("_")[2])
    blogger = await get_blogger(blogger_id)
    
    if not blogger:
        await callback.answer("‚ùå –ë–ª–æ–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user = await get_user(callback.from_user.id)
    if blogger.seller_id != user.id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –±–ª–æ–≥–µ—Ä")
        return
    
    await callback.answer()
    
    await callback.message.edit_text(
        f"‚ùó <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        f"–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞:\n"
        f"<b>{blogger.name}</b> ({blogger.url})\n\n"
        f"‚ö†Ô∏è <b>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</b>",
        reply_markup=get_delete_confirmation_keyboard(blogger.id),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("confirm_delete_"))
async def handle_confirm_delete(callback: CallbackQuery):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–∞"""
    blogger_id = int(callback.data.split("_")[2])
    blogger = await get_blogger(blogger_id)
    
    if not blogger:
        await callback.answer("‚ùå –ë–ª–æ–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user = await get_user(callback.from_user.id)
    if blogger.seller_id != user.id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –±–ª–æ–≥–µ—Ä")
        return
    
    from database.database import delete_blogger
    success = await delete_blogger(blogger_id)
    
    if success:
        await callback.answer("‚úÖ –ë–ª–æ–≥–µ—Ä —É–¥–∞–ª–µ–Ω")
        await callback.message.edit_text(
            f"‚úÖ <b>–ë–ª–æ–≥–µ—Ä —É–¥–∞–ª–µ–Ω</b>\n\n"
            f"–ë–ª–æ–≥–µ—Ä <b>{blogger.name}</b> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
            parse_mode="HTML"
        )
    else:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞</b>\n\n"
            "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )


def format_full_blogger_info(blogger) -> str:
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–ª–æ–≥–µ—Ä–µ"""
    info_text = f"üë§ <b>–ò–º—è:</b> {blogger.name}\n"
    info_text += f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {blogger.url}\n"
    
    # ===== –ü–õ–ê–¢–§–û–†–ú–´ =====
    if blogger.platforms:
        platforms_text = ", ".join([p.value.title() for p in blogger.platforms])
        info_text += f"üì± <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã:</b> {platforms_text}\n"
    
    # ===== –ö–ê–¢–ï–ì–û–†–ò–ò =====
    if blogger.categories:
        categories_text = ", ".join([cat.get_russian_name() for cat in blogger.categories])
        info_text += f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {categories_text}\n"
    
    # ===== –ü–û–î–ü–ò–°–ß–ò–ö–ò =====
    if blogger.subscribers_count:
        info_text += f"üë• <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–∏:</b> {blogger.subscribers_count:,}\n"
    
    # ===== –¶–ï–ù–´ =====
    info_text += f"\nüí∞ <b>–¶–µ–Ω—ã:</b>\n"
    if blogger.price_stories:
        info_text += f"‚Ä¢ –°—Ç–æ—Ä–∏—Å: {blogger.price_stories:,}‚ÇΩ\n"
    if blogger.price_post:
        info_text += f"‚Ä¢ –ü–æ—Å—Ç: {blogger.price_post:,}‚ÇΩ\n" 
    if blogger.price_video:
        info_text += f"‚Ä¢ –í–∏–¥–µ–æ: {blogger.price_video:,}‚ÇΩ\n"
    
    # ===== –°–¢–ê–¢–ò–°–¢–ò–ö–ê =====
    if blogger.avg_views or blogger.avg_likes or blogger.engagement_rate:
        info_text += f"\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        if blogger.avg_views:
            info_text += f"‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä—ã: {blogger.avg_views:,}\n"
        if blogger.avg_likes:
            info_text += f"‚Ä¢ –õ–∞–π–∫–∏: {blogger.avg_likes:,}\n"
        if blogger.engagement_rate:
            info_text += f"‚Ä¢ –í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å: {blogger.engagement_rate:.2f}%\n"
    
    # ===== –û–ü–ò–°–ê–ù–ò–ï (–µ—Å–ª–∏ –µ—Å—Ç—å) =====
    if blogger.description and blogger.description.strip():
        info_text += f"\nüìÑ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n<i>{blogger.description}</i>\n"
    
    return info_text 

# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ù–ê–í–ò–ì–ê–¶–ò–ò ===

@router.callback_query(F.data == "blogger_cancel")
async def handle_blogger_cancel(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–∞"""
    await callback.answer()
    await state.clear()
    
    await callback.message.edit_text(
        "‚ùå <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        parse_mode="HTML"
    )


@router.callback_query(F.data == "blogger_back")
async def handle_blogger_back(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É —à–∞–≥—É"""
    await callback.answer()
    
    current_state = await state.get_state()
    data = await state.get_data()
    
    if current_state == SellerStates.waiting_for_blogger_url.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –ø–ª–∞—Ç—Ñ–æ—Ä–º
        platforms = data.get('platforms', [])
        platforms_text = ", ".join([p.value for p in platforms]) if platforms else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
        
        await callback.message.edit_text(
            f"üéØ <b>–®–∞–≥ 1:</b> –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: <b>{platforms_text}</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –±–ª–æ–≥–µ—Ä–∞:",
            reply_markup=get_platform_keyboard(with_navigation=True),
            parse_mode="HTML"
        )
        await state.set_state(SellerStates.waiting_for_platform)
        
    elif current_state == SellerStates.waiting_for_blogger_name.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É URL
        platforms = data.get('platforms', [])
        await callback.message.edit_text(
            f"üéØ <b>–®–∞–≥ 2:</b> –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –±–ª–æ–≥–µ—Ä–∞\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: <b>{', '.join([p.value for p in platforms])}</b>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã —Å—Å—ã–ª–æ–∫:\n"
            "‚Ä¢ Instagram: https://instagram.com/username\n"
            "‚Ä¢ YouTube: https://youtube.com/@channel\n"
            "‚Ä¢ TikTok: https://tiktok.com/@username\n"
            "‚Ä¢ Telegram: https://t.me/username\n"
            "‚Ä¢ VK: https://vk.com/username",
            reply_markup=get_blogger_addition_navigation_with_back(),
            parse_mode="HTML"
        )
        await state.set_state(SellerStates.waiting_for_blogger_url)
        
    elif current_state == SellerStates.waiting_for_subscribers_count.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –∏–º–µ–Ω–∏
        await callback.message.edit_text(
            "üéØ <b>–®–∞–≥ 3:</b> –í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–ª–æ–≥–µ—Ä–∞\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏–ª–∏ –Ω–∏–∫–Ω–µ–π–º –±–ª–æ–≥–µ—Ä–∞:",
            reply_markup=get_blogger_addition_navigation_with_back(),
            parse_mode="HTML"
        )
        await state.set_state(SellerStates.waiting_for_blogger_name)
        
    elif current_state == SellerStates.waiting_for_price_stories.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        await callback.message.edit_text(
            "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–ª–æ–≥–µ—Ä–∞</b>\n\n"
            "–£–∫–∞–∂–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:",
            reply_markup=get_blogger_addition_navigation_with_back(),
            parse_mode="HTML"
        )
        await state.set_state(SellerStates.waiting_for_subscribers_count)
        
    elif current_state == SellerStates.waiting_for_price_reels.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É —Ü–µ–Ω—ã —Å—Ç–æ—Ä–∏—Å
        await callback.message.edit_text(
            "üí∞ <b>–¶–µ–Ω–∞ —Å—Ç–æ—Ä–∏—Å</b>\n\n"
            "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ —Å—Ç–æ—Ä–∏—Å –≤ —Ä—É–±–ª—è—Ö:",
            reply_markup=get_blogger_addition_navigation_with_back(),
            parse_mode="HTML"
        )
        await state.set_state(SellerStates.waiting_for_price_stories)
        
    elif current_state == SellerStates.waiting_for_price_video.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É —Ü–µ–Ω—ã —Ä–∏–ª—Å/–ø–æ—Å—Ç–∞
        await callback.message.edit_text(
            "üí∏ <b>–¶–µ–Ω–∞ –ø–æ—Å—Ç/—Ä–∏–ª—Å</b>\n\n"
            "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –ø–æ—Å—Ç/—Ä–∏–ª—Å –≤ —Ä—É–±–ª—è—Ö:",
            reply_markup=get_blogger_addition_navigation_with_back(),
            parse_mode="HTML"
        )
        await state.set_state(SellerStates.waiting_for_price_reels)
        
    elif current_state == SellerStates.waiting_for_categories.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É —Ü–µ–Ω—ã –≤–∏–¥–µ–æ
        await callback.message.edit_text(
            "üé¨ <b>–¶–µ–Ω–∞ –≤–∏–¥–µ–æ</b>\n\n"
            "–£–∫–∞–∂–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –≤–∏–¥–µ–æ –≤ —Ä—É–±–ª—è—Ö:",
            reply_markup=get_blogger_addition_navigation_with_back(),
            parse_mode="HTML"
        )
        await state.set_state(SellerStates.waiting_for_price_video)
        
    elif current_state == SellerStates.waiting_for_blogger_description.state:
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        categories = data.get('categories', [])
        categories_text = ", ".join([cat.get_russian_name() for cat in categories]) if categories else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
        
        await callback.message.edit_text(
            f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª–æ–≥–∞</b>\n\n"
            f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>{categories_text}</b>\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–º–∞–∫—Å–∏–º—É–º 3):",
            reply_markup=get_category_keyboard(with_navigation=True),
            parse_mode="HTML"
        )
        await state.set_state(SellerStates.waiting_for_categories)
        
    else:
        # –ï—Å–ª–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ, –æ—Ç–º–µ–Ω—è–µ–º
        await handle_blogger_cancel(callback, state)


# === –ë–õ–û–ö–ò–†–û–í–ö–ê –î–†–£–ì–ò–• –§–£–ù–ö–¶–ò–ô ===

@router.message(F.text.in_(["üë• –ú–æ–∏ –±–ª–æ–≥–µ—Ä—ã", "‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –±–ª–æ–≥–µ—Ä–∞"]), StateFilter(SellerStates))
async def block_during_addition(message: Message, state: FSMContext):
    """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π –≤–æ –≤—Ä–µ–º—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–≥–µ—Ä–∞"""
    current_state = await state.get_state()
    if current_state and "waiting_for" in current_state:
        await message.answer(
            "‚ö†Ô∏è <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ</b>\n\n"
            "–ó–∞–≤–µ—Ä—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –±–ª–æ–≥–µ—Ä–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û—Ç–º–µ–Ω–∏—Ç—å' –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥—Ä—É–≥–∏–º —Ñ—É–Ω–∫—Ü–∏—è–º.",
            parse_mode="HTML"
        )


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ü–û–õ–ï–ô ===

@router.callback_query(F.data.startswith("edit_blogger_fields_"))
async def handle_edit_blogger_fields(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª–µ–π –±–ª–æ–≥–µ—Ä–∞"""
    blogger_id = int(callback.data.split("_")[3])
    blogger = await get_blogger(blogger_id)
    
    if not blogger:
        await callback.answer("‚ùå –ë–ª–æ–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    user = await get_user(callback.from_user.id)
    if blogger.seller_id != user.id:
        await callback.answer("‚ùå –≠—Ç–æ –Ω–µ –≤–∞—à –±–ª–æ–≥–µ—Ä")
        return
    
    await callback.answer()
    
    info_text = f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª–µ–π –±–ª–æ–≥–µ—Ä–∞</b>\n\n"
    info_text += format_full_blogger_info(blogger)
    info_text += f"\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:</b>"
    
    await callback.message.edit_text(
        info_text,
        reply_markup=get_blogger_edit_field_keyboard(blogger.id),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "edit_blogger_done")
async def handle_edit_blogger_done(callback: CallbackQuery):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–ª–æ–≥–µ—Ä–∞"""
    await callback.answer()
    
    await callback.message.edit_text(
        "‚úÖ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ</b>\n\n"
        "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!",
        parse_mode="HTML"
    )


@router.callback_query(F.data == "add_another_blogger")
async def handle_add_another_blogger(callback: CallbackQuery, state: FSMContext):
    """–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ–≥–æ –±–ª–æ–≥–µ—Ä–∞"""
    await callback.answer()
    await state.clear()
    
    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–≥–µ—Ä–∞</b>\n\n"
        "–î–∞–≤–∞–π—Ç–µ –¥–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–≥–æ –±–ª–æ–≥–µ—Ä–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.\n\n"
        "üéØ <b>–®–∞–≥ 1:</b> –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É:",
        reply_markup=get_platform_keyboard(with_navigation=True),
        parse_mode="HTML"
    )
    await state.set_state(SellerStates.waiting_for_platform)


@router.callback_query(F.data == "show_my_bloggers")
async def handle_show_my_bloggers_callback(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –±–ª–æ–≥–µ—Ä–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await callback.answer()
    await state.clear()
    
    user = await get_user(callback.from_user.id)
    if not user:
        await callback.message.edit_text("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return
    
    bloggers = await get_user_bloggers(user.id)
    
    if not bloggers:
        await callback.message.edit_text(
            "üìù <b>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –±–ª–æ–≥–µ—Ä–æ–≤</b>\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –±–ª–æ–≥–µ—Ä–∞ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ 'üìù –î–æ–±–∞–≤–∏—Ç—å –±–ª–æ–≥–µ—Ä–∞'",
            parse_mode="HTML"
        )
        return
    
    # –£–¥–∞–ª—è–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
    await callback.message.delete()
    
    for blogger in bloggers:
        info_text = f"üìù <b>–ë–ª–æ–≥–µ—Ä #{blogger.id}</b>\n\n"
        info_text += format_full_blogger_info(blogger)
        
        # –í—Ä–µ–º–µ–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
        management_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_blogger_fields_{blogger.id}"),
                InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"delete_blogger_{blogger.id}")
            ]
        ])
        
        await callback.message.answer(
            info_text,
            reply_markup=management_keyboard,
            parse_mode="HTML"
        )