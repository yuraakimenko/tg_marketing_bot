import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from database.database import get_user, search_bloggers, get_blogger, create_complaint
from database.models import UserRole, SubscriptionStatus
from bot.keyboards import (
    get_category_keyboard, get_yes_no_keyboard, 
    get_search_results_keyboard, get_blogger_selection_keyboard,
    get_main_menu_buyer
)
from bot.states import BuyerStates, ComplaintStates

router = Router()
logger = logging.getLogger(__name__)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–°–ù–û–í–ù–û–ì–û –ú–ï–ù–Æ –ó–ê–ö–£–ü–©–ò–ö–ê ===

@router.message(F.text == "üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞", state="*")
async def universal_show_search_history(message: Message, state: FSMContext):
    await state.clear()
    user = await get_user(message.from_user.id)
    if not user or user.role != UserRole.BUYER:
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞–∫—É–ø—â–∏–∫–∞–º.")
        return
    await message.answer(
        "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞</b>\n\n"
        "üìä –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:\n"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–∏—Å–∫–æ–≤\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        "‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –±–ª–æ–≥–µ—Ä—ã\n\n"
        "üîç –ü–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –±–ª–æ–≥–µ—Ä–æ–≤.",
        parse_mode="HTML"
    )


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", state="*")
async def universal_show_statistics(message: Message, state: FSMContext):
    await state.clear()
    user = await get_user(message.from_user.id)
    if not user or user.role != UserRole.BUYER:
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞–∫—É–ø—â–∏–∫–∞–º.")
        return
    subscription_status = "–∞–∫—Ç–∏–≤–Ω–∞" if user.subscription_status == SubscriptionStatus.ACTIVE else "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
    stats_text = (
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üë§ <b>–†–æ–ª—å:</b> –∑–∞–∫—É–ø—â–∏–∫\n"
        f"üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription_status}\n"
        f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {user.rating:.1f}\n"
        f"üìù <b>–û—Ç–∑—ã–≤–æ–≤:</b> {user.reviews_count}\n"
        f"üìÖ <b>–í –±–æ—Ç–µ —Å:</b> {user.created_at.strftime('%d.%m.%Y')}\n"
    )
    if user.subscription_end_date:
        stats_text += f"\nüóìÔ∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:</b> {user.subscription_end_date.strftime('%d.%m.%Y')}"
    stats_text += (
        f"\n\nüîç <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞:</b>\n"
        f"‚Ä¢ –ü–æ–∏—Å–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
        f"‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
        f"‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤: –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    )
    await message.answer(stats_text, parse_mode="HTML")


@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –±–ª–æ–≥–µ—Ä–æ–≤", state="*")
async def universal_start_search(message: Message, state: FSMContext):
    await state.clear()
    user = await get_user(message.from_user.id)
    if not user or user.role != UserRole.BUYER:
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞–∫—É–ø—â–∏–∫–∞–º.")
        return
    if user.subscription_status != SubscriptionStatus.ACTIVE:
        await message.answer(
            "‚ùå –î–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–æ–≥–µ—Ä–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n"
            "üí≥ –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü–æ–¥–ø–∏—Å–∫–∞'."
        )
        return
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –±–ª–æ–≥–µ—Ä–æ–≤</b>\n\n"
        "–®–∞–≥ 1 –∏–∑ 4\n"
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_category_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(BuyerStates.waiting_for_category)


@router.callback_query(F.data.startswith("category_"), BuyerStates.waiting_for_category)
async def process_search_category(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    category = callback.data.split("_", 1)[1]
    
    if category == "other":
        await callback.answer()
        await callback.message.edit_text(
            "–®–∞–≥ 1 –∏–∑ 4\n"
            "üéØ –í–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø–æ–∏—Å–∫–∞:"
        )
        return
    
    await state.update_data(category=category)
    await callback.answer()
    
    await callback.message.edit_text(
        "–®–∞–≥ 2 –∏–∑ 4\n"
        "üë• –û–ø–∏—à–∏—Ç–µ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '–∂–µ–Ω—â–∏–Ω—ã 25-35 –ª–µ—Ç' –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ '–ª—é–±–∞—è' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"
    )
    await state.set_state(BuyerStates.waiting_for_audience)


@router.message(BuyerStates.waiting_for_audience)
async def process_search_audience(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    audience = None if message.text.lower() == "–ª—é–±–∞—è" else message.text
    await state.update_data(target_audience=audience)
    
    await message.answer(
        "–®–∞–≥ 3 –∏–∑ 4\n"
        "üó£Ô∏è –í–∞–∂–Ω–æ –ª–∏ –Ω–∞–ª–∏—á–∏–µ –æ—Ç–∑—ã–≤–æ–≤ —É –±–ª–æ–≥–µ—Ä–∞?",
        reply_markup=get_yes_no_keyboard("reviews_important")
    )
    await state.set_state(BuyerStates.waiting_for_reviews_preference)


@router.callback_query(F.data.startswith("yes_reviews_important") | F.data.startswith("no_reviews_important"), 
                      BuyerStates.waiting_for_reviews_preference)
async def process_reviews_preference(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∞–∂–Ω–æ—Å—Ç–∏ –æ—Ç–∑—ã–≤–æ–≤"""
    has_reviews = callback.data.startswith("yes_") if not callback.data.endswith("no_reviews_important") else None
    await state.update_data(has_reviews=has_reviews)
    
    await callback.answer()
    await callback.message.edit_text(
        "–®–∞–≥ 4 –∏–∑ 4\n"
        "üí∞ –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç:\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: '5000-15000' –∏–ª–∏ '10000' –∏–ª–∏ '–ª—é–±–æ–π' –¥–ª—è –ø—Ä–æ–ø—É—Å–∫–∞"
    )
    await state.set_state(BuyerStates.waiting_for_budget)


@router.message(BuyerStates.waiting_for_budget)
async def process_budget_and_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—é–¥–∂–µ—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞"""
    budget_text = message.text.lower()
    budget_min = None
    budget_max = None
    
    if budget_text != "–ª—é–±–æ–π":
        try:
            if "-" in budget_text:
                # –î–∏–∞–ø–∞–∑–æ–Ω: "5000-15000"
                parts = budget_text.split("-")
                budget_min = int(parts[0].strip())
                budget_max = int(parts[1].strip())
            else:
                # –û–¥–Ω–æ —á–∏—Å–ª–æ: –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç
                budget_max = int(budget_text)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –±—é–¥–∂–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
            return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
    data = await state.get_data()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    results = await search_bloggers(
        category=data.get('category'),
        target_audience=data.get('target_audience'),
        has_reviews=data.get('has_reviews'),
        budget_min=budget_min,
        budget_max=budget_max,
        limit=5,
        offset=0
    )
    
    await state.update_data(
        search_results=results,
        search_params={
            'category': data.get('category'),
            'target_audience': data.get('target_audience'),
            'has_reviews': data.get('has_reviews'),
            'budget_min': budget_min,
            'budget_max': budget_max
        },
        current_page=0
    )
    
    if not results:
        await message.answer(
            "üòî <b>–ü–æ –≤–∞—à–∏–º –∫—Ä–∏—Ç–µ—Ä–∏—è–º –±–ª–æ–≥–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
            "‚Ä¢ –†–∞—Å—à–∏—Ä–∏—Ç—å –±—é–¥–∂–µ—Ç\n"
            "‚Ä¢ –ò–∑–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é\n"
            "‚Ä¢ –£–±—Ä–∞—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ –∫ –æ—Ç–∑—ã–≤–∞–º\n\n"
            "üîç –ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫?",
            reply_markup=get_yes_no_keyboard("new_search"),
            parse_mode="HTML"
        )
        await state.set_state(BuyerStates.viewing_results)
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    await show_search_results(message, results, 0)
    await state.set_state(BuyerStates.viewing_results)


async def show_search_results(message, results, page=0):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞"""
    results_text = f"üîç <b>–ù–∞–π–¥–µ–Ω–æ –±–ª–æ–≥–µ—Ä–æ–≤: {len(results)}</b>\n\n"
    
    for i, (blogger, seller) in enumerate(results, 1):
        price_info = "–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è"
        if blogger.price_min or blogger.price_max:
            if blogger.price_min and blogger.price_max:
                price_info = f"{blogger.price_min}-{blogger.price_max} ‚ÇΩ"
            elif blogger.price_min:
                price_info = f"–æ—Ç {blogger.price_min} ‚ÇΩ"
            elif blogger.price_max:
                price_info = f"–¥–æ {blogger.price_max} ‚ÇΩ"
        
        results_text += (
            f"<b>{i}. {blogger.name}</b>\n"
            f"üì± {blogger.platform} | üéØ {blogger.category}\n"
            f"üë• {blogger.target_audience}\n"
            f"üí∞ {price_info}\n"
            f"üó£Ô∏è –û—Ç–∑—ã–≤—ã: {'–ï—Å—Ç—å' if blogger.has_reviews else '–ù–µ—Ç'}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞: {seller.rating:.1f}\n\n"
        )
    
    results_text += "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–≥–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:"
    
    await message.answer(
        results_text,
        reply_markup=get_search_results_keyboard(results, page),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("select_blogger_"), BuyerStates.viewing_results)
async def select_blogger(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –±–ª–æ–≥–µ—Ä–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    blogger_id = int(callback.data.split("_")[2])
    
    # –ù–∞—Ö–æ–¥–∏–º –±–ª–æ–≥–µ—Ä–∞ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø–æ–∏—Å–∫–∞
    data = await state.get_data()
    results = data.get('search_results', [])
    
    selected_blogger = None
    selected_seller = None
    
    for blogger, seller in results:
        if blogger.id == blogger_id:
            selected_blogger = blogger
            selected_seller = seller
            break
    
    if not selected_blogger:
        await callback.answer("‚ùå –ë–ª–æ–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –±–ª–æ–≥–µ—Ä–∞
    price_info = "–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è"
    if selected_blogger.price_min or selected_blogger.price_max:
        if selected_blogger.price_min and selected_blogger.price_max:
            price_info = f"{selected_blogger.price_min}-{selected_blogger.price_max} ‚ÇΩ"
        elif selected_blogger.price_min:
            price_info = f"–æ—Ç {selected_blogger.price_min} ‚ÇΩ"
        elif selected_blogger.price_max:
            price_info = f"–¥–æ {selected_blogger.price_max} ‚ÇΩ"
    
    blogger_details = (
        f"üìù <b>–î–µ—Ç–∞–ª–∏ –±–ª–æ–≥–µ—Ä–∞</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {selected_blogger.name}\n"
        f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {selected_blogger.url}\n"
        f"üì± <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {selected_blogger.platform}\n"
        f"üéØ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {selected_blogger.category}\n"
        f"üë• <b>–ê—É–¥–∏—Ç–æ—Ä–∏—è:</b> {selected_blogger.target_audience}\n"
        f"üó£Ô∏è <b>–û—Ç–∑—ã–≤—ã:</b> {'–ï—Å—Ç—å' if selected_blogger.has_reviews else '–ù–µ—Ç'}\n"
        f"üí∞ <b>–¶–µ–Ω–∞:</b> {price_info}\n"
        f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞:</b> {selected_seller.rating:.1f}"
    )
    
    if selected_blogger.description:
        blogger_details += f"\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {selected_blogger.description}"
    
    await callback.answer()
    await callback.message.edit_text(
        blogger_details,
        reply_markup=get_blogger_selection_keyboard(blogger_id, selected_seller.id),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("get_contacts_"))
async def get_blogger_contacts(callback: CallbackQuery):
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞ –±–ª–æ–≥–µ—Ä–∞"""
    parts = callback.data.split("_")
    blogger_id = int(parts[2])
    seller_id = int(parts[3])
    
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–∫—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤
    # –ù–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ç–∞–±–ª–∏—Ü—É contacts
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥–∞–≤—Ü–µ
    seller_user = await get_user_by_id(seller_id)
    
    if not seller_user:
        await callback.answer("‚ùå –ü—Ä–æ–¥–∞–≤–µ—Ü –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    contact_info = (
        f"üìû <b>–ö–æ–Ω—Ç–∞–∫—Ç—ã –ø—Ä–æ–¥–∞–≤—Ü–∞</b>\n\n"
        f"üë§ <b>–ò–º—è:</b> {seller_user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
    )
    
    if seller_user.username:
        contact_info += f"üì± <b>Telegram:</b> @{seller_user.username}\n"
    else:
        contact_info += f"üÜî <b>ID:</b> {seller_user.telegram_id}\n"
    
    contact_info += (
        f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {seller_user.rating:.1f} ({seller_user.reviews_count} –æ—Ç–∑—ã–≤–æ–≤)\n\n"
        "üí¨ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞."
    )
    
    await callback.answer()
    await callback.message.edit_text(
        contact_info,
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("search_page_"), BuyerStates.viewing_results)
async def search_pagination(callback: CallbackQuery, state: FSMContext):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    page = int(callback.data.split("_")[2])
    
    data = await state.get_data()
    search_params = data.get('search_params', {})
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ –¥–ª—è –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    results = await search_bloggers(
        category=search_params.get('category'),
        target_audience=search_params.get('target_audience'),
        has_reviews=search_params.get('has_reviews'),
        budget_min=search_params.get('budget_min'),
        budget_max=search_params.get('budget_max'),
        limit=5,
        offset=page * 5
    )
    
    if not results:
        await callback.answer("üòî –ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ—Ç")
        return
    
    await state.update_data(search_results=results, current_page=page)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    results_text = f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (—Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1})</b>\n\n"
    
    for i, (blogger, seller) in enumerate(results, page * 5 + 1):
        price_info = "–î–æ–≥–æ–≤–æ—Ä–Ω–∞—è"
        if blogger.price_min or blogger.price_max:
            if blogger.price_min and blogger.price_max:
                price_info = f"{blogger.price_min}-{blogger.price_max} ‚ÇΩ"
            elif blogger.price_min:
                price_info = f"–æ—Ç {blogger.price_min} ‚ÇΩ"
            elif blogger.price_max:
                price_info = f"–¥–æ {blogger.price_max} ‚ÇΩ"
        
        results_text += (
            f"<b>{i}. {blogger.name}</b>\n"
            f"üì± {blogger.platform} | üéØ {blogger.category}\n"
            f"üë• {blogger.target_audience}\n"
            f"üí∞ {price_info}\n"
            f"üó£Ô∏è –û—Ç–∑—ã–≤—ã: {'–ï—Å—Ç—å' if blogger.has_reviews else '–ù–µ—Ç'}\n"
            f"‚≠ê –†–µ–π—Ç–∏–Ω–≥ –ø—Ä–æ–¥–∞–≤—Ü–∞: {seller.rating:.1f}\n\n"
        )
    
    results_text += "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–≥–µ—Ä–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤:"
    
    await callback.answer()
    await callback.message.edit_text(
        results_text,
        reply_markup=get_search_results_keyboard(results, page),
        parse_mode="HTML"
    )


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ü–†–ï–†–´–í–ê–ù–ò–Ø –ü–†–û–¶–ï–°–°–ê –ü–û–ò–°–ö–ê ===

@router.message(F.text == "üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞", BuyerStates())
async def interrupt_with_history(message: Message, state: FSMContext):
    """–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –∏—Å—Ç–æ—Ä–∏–∏"""
    await state.clear()
    await message.answer(
        "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
        "üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.\n"
        "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö."
    )


@router.message(F.text == "üí≥ –ü–æ–¥–ø–∏—Å–∫–∞", BuyerStates())
async def interrupt_with_subscription_buyer(message: Message, state: FSMContext):
    """–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –ø–æ–¥–ø–∏—Å–∫–µ"""
    await state.clear()
    await message.answer(
        "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞–∑–¥–µ–ª—É –ø–æ–¥–ø–∏—Å–∫–∏..."
    )


@router.message(F.text == "üîß –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–æ–π", BuyerStates())
async def interrupt_with_subscription_management_buyer(message: Message, state: FSMContext):
    """–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    await state.clear()
    await message.answer(
        "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –ø–æ–¥–ø–∏—Å–∫–æ–π..."
    )


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", BuyerStates())
async def interrupt_with_settings_buyer(message: Message, state: FSMContext):
    """–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    await state.clear()
    await message.answer(
        "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º..."
    )


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", BuyerStates())
async def interrupt_with_statistics_buyer(message: Message, state: FSMContext):
    """–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø–æ–∏—Å–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ"""
    await state.clear()
    await message.answer(
        "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
        "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ..."
    )


@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –±–ª–æ–≥–µ—Ä–æ–≤", BuyerStates())
async def restart_search(message: Message, state: FSMContext):
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø–æ–∏—Å–∫–∞ –µ—Å–ª–∏ —É–∂–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ"""
    await state.clear()
    await message.answer("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∏—Å–∫...")
    await universal_start_search(message, state)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã
@router.message(F.text.in_({"‚ùå –û—Ç–º–µ–Ω–∞", "/cancel", "–æ—Ç–º–µ–Ω–∞", "–û—Ç–º–µ–Ω–∞"}), BuyerStates())
async def cancel_search(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–∏—Å–∫–∞"""
    await state.clear()
    await message.answer(
        "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏."
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞" –≤ inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞—Ö
@router.callback_query(F.data == "cancel_action", BuyerStates())
async def cancel_action_callback_buyer(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è —á–µ—Ä–µ–∑ inline –∫–Ω–æ–ø–∫—É"""
    await state.clear()
    await callback.answer("‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
    await callback.message.edit_text(
        "‚ùå –ü–æ–∏—Å–∫ –æ—Ç–º–µ–Ω–µ–Ω.\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥—Ä—É–≥–∏–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏."
    )


@router.callback_query(F.data == "new_search")
async def new_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫"""
    await state.clear()
    await callback.answer()
    await callback.message.edit_text(
        "üîç <b>–ù–æ–≤—ã–π –ø–æ–∏—Å–∫ –±–ª–æ–≥–µ—Ä–æ–≤</b>\n\n"
        "–®–∞–≥ 1 –∏–∑ 4\n"
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_category_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(BuyerStates.waiting_for_category)


@router.callback_query(F.data == "back_to_results")
async def back_to_results(callback: CallbackQuery, state: FSMContext):
    """–í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞"""
    data = await state.get_data()
    results = data.get('search_results', [])
    page = data.get('current_page', 0)
    
    if not results:
        await callback.answer("‚ùå –ù–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        return
    
    await callback.answer()
    await show_search_results(callback.message, results, page)


@router.callback_query(F.data == "yes_new_search")
async def yes_new_search(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[DEBUG] yes_new_search handler called. callback.data={callback.data}, user_id={callback.from_user.id}")
    await state.clear()
    await callback.answer()
    await callback.message.edit_text(
        "üîç <b>–ù–æ–≤—ã–π –ø–æ–∏—Å–∫ –±–ª–æ–≥–µ—Ä–æ–≤</b>\n\n"
        "–®–∞–≥ 1 –∏–∑ 4\n"
        "üéØ –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_category_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(BuyerStates.waiting_for_category)


@router.callback_query(F.data == "no_new_search")
async def no_new_search(callback: CallbackQuery, state: FSMContext):
    logger.info(f"[DEBUG] no_new_search handler called. callback.data={callback.data}, user_id={callback.from_user.id}")
    await state.clear()
    user = await get_user(callback.from_user.id)
    await callback.answer()
    await callback.message.edit_text(
        "üè† <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>",
        reply_markup=get_main_menu_buyer(user.subscription_status == SubscriptionStatus.ACTIVE),
        parse_mode="HTML"
    )


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
async def get_user_by_id(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID"""
    # –≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ database.py
    import aiosqlite
    from database.database import DATABASE_PATH
    from database.models import User, UserRole, SubscriptionStatus
    from datetime import datetime
    
    async with aiosqlite.connect(DATABASE_PATH) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute(
            "SELECT * FROM users WHERE id = ?", (user_id,)
        )
        row = await cursor.fetchone()
        
        if row:
            return User(
                id=row['id'],
                telegram_id=row['telegram_id'],
                username=row['username'],
                first_name=row['first_name'],
                last_name=row['last_name'],
                role=UserRole(row['role']),
                subscription_status=SubscriptionStatus(row['subscription_status']),
                subscription_end_date=datetime.fromisoformat(row['subscription_end_date']) if row['subscription_end_date'] else None,
                rating=row['rating'],
                reviews_count=row['reviews_count'],
                created_at=datetime.fromisoformat(row['created_at']),
                updated_at=datetime.fromisoformat(row['updated_at'])
            )
        return None


@router.callback_query(F.data.startswith("complaint_"))
async def start_complaint(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–¥–∞—á–∏ –∂–∞–ª–æ–±—ã –Ω–∞ –±–ª–æ–≥–µ—Ä–∞"""
    blogger_id = int(callback.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–≥–µ—Ä–µ
    blogger = await get_blogger(blogger_id)
    if not blogger:
        await callback.answer("‚ùå –ë–ª–æ–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –±–ª–æ–≥–µ—Ä–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(complaint_blogger_id=blogger_id, complaint_blogger_name=blogger.name)
    await state.set_state(ComplaintStates.waiting_for_complaint_reason)
    
    await callback.answer()
    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã –Ω–∞ –±–ª–æ–≥–µ—Ä–∞</b>\n\n"
        f"üìù <b>–ë–ª–æ–≥–µ—Ä:</b> {blogger.name}\n"
        f"üì± <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞:</b> {blogger.platform}\n\n"
        f"üí¨ <b>–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:</b>\n"
        f"–û–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–æ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç –≤ —ç—Ç–æ–º –±–ª–æ–≥–µ—Ä–µ "
        f"(–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –Ω–∞ –Ω–∞–∫—Ä—É—Ç–∫—É, —Ñ–µ–π–∫–æ–≤—ã–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏, –Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ —Ç.–¥.)\n\n"
        f"–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.",
        parse_mode="HTML"
    )


@router.message(ComplaintStates.waiting_for_complaint_reason)
async def process_complaint_reason(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –∂–∞–ª–æ–±—ã"""
    if message.text.lower() in ['–æ—Ç–º–µ–Ω–∞', 'cancel', '/cancel']:
        await state.clear()
        await message.answer("‚ùå –ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return
    
    reason = message.text.strip()
    if len(reason) < 10:
        await message.answer(
            "‚ö†Ô∏è –ü—Ä–∏—á–∏–Ω–∞ –∂–∞–ª–æ–±—ã —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∞—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    blogger_id = data.get('complaint_blogger_id')
    blogger_name = data.get('complaint_blogger_name')
    
    user = await get_user(message.from_user.id)
    username = message.from_user.username or f"{message.from_user.first_name or '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∂–∞–ª–æ–±—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success = await create_complaint(
        blogger_id=blogger_id,
        blogger_name=blogger_name,
        user_id=user.id,
        username=username,
        reason=reason
    )
    
    await state.clear()
    
    if success:
        await message.answer(
            f"‚úÖ <b>–ñ–∞–ª–æ–±–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üìù <b>–ë–ª–æ–≥–µ—Ä:</b> {blogger_name}\n"
            f"üí¨ <b>–ü—Ä–∏—á–∏–Ω–∞:</b> {reason[:100]}{'...' if len(reason) > 100 else ''}\n\n"
            f"üîç –í–∞—à–∞ –∂–∞–ª–æ–±–∞ –±—É–¥–µ—Ç —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
            f"üìä –í—Å–µ –∂–∞–ª–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º—É —É—á–µ—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        ) 