import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

from database.database import get_user, search_bloggers, get_blogger, create_complaint
from database.models import UserRole, SubscriptionStatus
from bot.keyboards import (
    get_category_keyboard, get_yes_no_keyboard, 
    get_search_results_keyboard, get_blogger_selection_keyboard,
    get_main_menu_buyer
)
from bot.states import BuyerStates, ComplaintStates
from utils.google_sheets import log_complaint_to_sheets

router = Router()
logger = logging.getLogger(__name__)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –û–°–ù–û–í–ù–û–ì–û –ú–ï–ù–Æ –ó–ê–ö–£–ü–©–ò–ö–ê ===

@router.message(F.text == "üìã –ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞", StateFilter("*"))
async def universal_show_search_history(message: Message, state: FSMContext):
    await state.clear()
    user = await get_user(message.from_user.id)
    if not user or not user.has_role(UserRole.BUYER):
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞–∫—É–ø—â–∏–∫–∞–º.")
        return
    await message.answer(
        "üìã <b>–ò—Å—Ç–æ—Ä–∏—è –ø–æ–∏—Å–∫–∞</b>\n\n"
        "üìä –§—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n\n"
        "–°–∫–æ—Ä–æ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è:\n"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –ø–æ–∏—Å–∫–æ–≤\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã\n"
        "‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –±–ª–æ–≥–µ—Ä—ã\n\n"
        "üîç –ü–æ–∫–∞ –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø–æ–∏—Å–∫ –±–ª–æ–≥–µ—Ä–æ–≤.",
        parse_mode="HTML"
    )


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", StateFilter("*"))
async def universal_show_statistics(message: Message, state: FSMContext):
    await state.clear()
    user = await get_user(message.from_user.id)
    if not user or not user.has_role(UserRole.BUYER):
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞–∫—É–ø—â–∏–∫–∞–º.")
        return
    subscription_status = "–∞–∫—Ç–∏–≤–Ω–∞" if user.subscription_status == SubscriptionStatus.ACTIVE else "–Ω–µ–∞–∫—Ç–∏–≤–Ω–∞"
    stats_text = (
        f"üìä <b>–í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n"
        f"üë§ <b>–†–æ–ª—å:</b> –∑–∞–∫—É–ø—â–∏–∫\n"
        f"üí≥ <b>–ü–æ–¥–ø–∏—Å–∫–∞:</b> {subscription_status}\n"
        f"‚≠ê <b>–†–µ–π—Ç–∏–Ω–≥:</b> {user.rating:.1f}\n"
        f"üìù <b>–û—Ç–∑—ã–≤–æ–≤:</b> {user.reviews_count}\n"
        f"üìÖ <b>–í –±–æ—Ç–µ —Å:</b> {user.created_at.strftime('%d.%m.%Y')}\n"
    )
    if user.subscription_end_date:
        stats_text += f"\nüóìÔ∏è <b>–ü–æ–¥–ø–∏—Å–∫–∞ –¥–æ:</b> {user.subscription_end_date.strftime('%d.%m.%Y')}"
    stats_text += (
        f"\n\nüîç <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–∏—Å–∫–∞:</b>\n"
        f"‚Ä¢ –ü–æ–∏—Å–∫–æ–≤ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
        f"‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–ª—É—á–µ–Ω–æ: –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ\n"
        f"‚Ä¢ –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –±–ª–æ–≥–µ—Ä–æ–≤: –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ"
    )
    await message.answer(stats_text, parse_mode="HTML")


@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –±–ª–æ–≥–µ—Ä–æ–≤", StateFilter("*"))
async def universal_search_bloggers(message: Message, state: FSMContext):
    await state.clear()
    user = await get_user(message.from_user.id)
    if not user or not user.has_role(UserRole.BUYER):
        await message.answer("‚ùå –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∑–∞–∫—É–ø—â–∏–∫–∞–º.")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
    has_active_subscription = user.subscription_status in [
        SubscriptionStatus.ACTIVE, 
        SubscriptionStatus.AUTO_RENEWAL_OFF, 
        SubscriptionStatus.CANCELLED
    ]
    
    if not has_active_subscription:
        await message.answer(
            "üí≥ <b>–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞</b>\n\n"
            "–î–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–æ–≥–µ—Ä–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n"
            "–°—Ç–æ–∏–º–æ—Å—Ç—å: 500‚ÇΩ/–º–µ—Å\n\n"
            "–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ —Ä–∞–∑–¥–µ–ª–µ üí≥ –ü–æ–¥–ø–∏—Å–∫–∞",
            parse_mode="HTML"
        )
        return
    
    await message.answer(
        "üîç <b>–ü–æ–∏—Å–∫ –±–ª–æ–≥–µ—Ä–æ–≤</b>\n\n"
        "–î–∞–≤–∞–π—Ç–µ –Ω–∞–π–¥–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –±–ª–æ–≥–µ—Ä–æ–≤ –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞.\n\n"
        "üéØ <b>–®–∞–≥ 1:</b> –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã:",
        reply_markup=get_platform_selection_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(BuyerStates.waiting_for_platforms)


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–û–ò–°–ö–ê –ë–õ–û–ì–ï–†–û–í ===

@router.callback_query(F.data.startswith("platform_"), BuyerStates.waiting_for_platforms)
async def handle_platform_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    platform_str = callback.data.split("_")[1]
    platform = Platform(platform_str)
    
    data = await state.get_data()
    platforms = data.get('platforms', [])
    
    if platform in platforms:
        # –£–±–∏—Ä–∞–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        platforms.remove(platform)
        await callback.answer(f"‚ùå –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ '{platform.value}' —É–±—Ä–∞–Ω–∞")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É
        platforms.append(platform)
        await callback.answer(f"‚úÖ –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞ '{platform.value}' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    
    await state.update_data(platforms=platforms)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    platforms_text = ", ".join([p.value for p in platforms]) if platforms else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
    
    await callback.message.edit_text(
        f"üéØ <b>–®–∞–≥ 1:</b> –í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã\n\n"
        f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã: <b>{platforms_text}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã –¥–ª—è –ø–æ–∏—Å–∫–∞:",
        reply_markup=get_platform_selection_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "confirm_platforms", BuyerStates.waiting_for_platforms)
async def confirm_platforms(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º"""
    data = await state.get_data()
    platforms = data.get('platforms', [])
    
    if not platforms:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø–ª–∞—Ç—Ñ–æ—Ä–º—É")
        return
    
    await callback.answer()
    
    await callback.message.edit_text(
        f"üë• <b>–¶–µ–ª–µ–≤–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è</b>\n\n"
        f"–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏:\n\n"
        f"üí° <b>–í–∞–∂–Ω–æ:</b> –£–∫–∞–∂–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –≤ –≥–æ–¥–∞—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä: 18, 25, 35)",
        parse_mode="HTML"
    )
    await state.set_state(BuyerStates.waiting_for_target_age)


@router.message(BuyerStates.waiting_for_target_age)
async def handle_target_age(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(message.text.strip())
        if age < 13 or age > 65:
            raise ValueError("Invalid age")
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 13 –¥–æ 65 –ª–µ—Ç.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(target_age_min=age)
    
    await message.answer(
        f"üë• –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏:\n\n"
        f"–£–∂–µ —É–∫–∞–∑–∞–Ω–æ: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n\n"
        f"üí° <b>–í–∞–∂–Ω–æ:</b> –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ",
        parse_mode="HTML"
    )
    await state.set_state(BuyerStates.waiting_for_target_age_max)


@router.message(BuyerStates.waiting_for_target_age_max)
async def handle_target_age_max(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ü–µ–ª–µ–≤–æ–≥–æ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age_max = int(message.text.strip())
        if age_max < 13 or age_max > 65:
            raise ValueError("Invalid age")
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç –æ—Ç 13 –¥–æ 65 –ª–µ—Ç.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    data = await state.get_data()
    age_min = data.get('target_age_min', 0)
    
    if age_max <= age_min:
        await message.answer(
            f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç</b>\n\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç ({age_max}) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ ({age_min}).\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(target_age_max=age_max)
    
    await message.answer(
        f"üë• <b>–ü–æ–ª —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏:",
        reply_markup=get_gender_selection_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(BuyerStates.waiting_for_target_gender)


@router.callback_query(F.data.startswith("gender_"), BuyerStates.waiting_for_target_gender)
async def handle_target_gender(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ —Ü–µ–ª–µ–≤–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    gender = callback.data.split("_")[1]
    
    await state.update_data(target_gender=gender)
    await callback.answer()
    
    await callback.message.edit_text(
        f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª–æ–≥–æ–≤</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=get_category_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(BuyerStates.waiting_for_categories)


@router.callback_query(F.data.startswith("category_"), BuyerStates.waiting_for_categories)
async def handle_category_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    category_str = callback.data.split("_")[1]
    category = BlogCategory(category_str)
    
    data = await state.get_data()
    categories = data.get('categories', [])
    
    if category in categories:
        # –£–±–∏—Ä–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        categories.remove(category)
        await callback.answer(f"‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.value}' —É–±—Ä–∞–Ω–∞")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        categories.append(category)
        await callback.answer(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category.value}' –¥–æ–±–∞–≤–ª–µ–Ω–∞")
    
    await state.update_data(categories=categories)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    categories_text = ", ".join([cat.value for cat in categories]) if categories else "–ù–µ –≤—ã–±—Ä–∞–Ω–æ"
    
    await callback.message.edit_text(
        f"üè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –±–ª–æ–≥–æ–≤</b>\n\n"
        f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: <b>{categories_text}</b>\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=get_category_keyboard(),
        parse_mode="HTML"
    )


@router.callback_query(F.data == "confirm_categories", BuyerStates.waiting_for_categories)
async def confirm_categories(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    data = await state.get_data()
    categories = data.get('categories', [])
    
    if not categories:
        await callback.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
        return
    
    await callback.answer()
    
    await callback.message.edit_text(
        f"üí∞ <b>–ë—é–¥–∂–µ—Ç</b>\n\n"
        f"–£–∫–∞–∂–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç (–≤ —Ä—É–±–ª—è—Ö):\n\n"
        f"üí° <b>–í–∞–∂–Ω–æ:</b> –ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–µ–Ω 1000",
        parse_mode="HTML"
    )
    await state.set_state(BuyerStates.waiting_for_budget)


@router.message(BuyerStates.waiting_for_budget)
async def handle_budget(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞"""
    try:
        budget = int(message.text.strip())
        if budget < 0:
            raise ValueError("Negative budget")
        if budget % 1000 != 0:
            await message.answer(
                "‚ùå <b>–ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–µ–Ω 1000</b>\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã: 5000, 10000, 15000\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode="HTML"
            )
            return
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∫—Ä–∞—Ç–Ω–æ–µ 1000.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(budget_min=budget)
    
    await message.answer(
        f"üí∞ –£–∫–∞–∂–∏—Ç–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç (–≤ —Ä—É–±–ª—è—Ö):\n\n"
        f"–£–∂–µ —É–∫–∞–∑–∞–Ω–æ: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç: {budget}‚ÇΩ\n\n"
        f"üí° <b>–í–∞–∂–Ω–æ:</b> –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ",
        parse_mode="HTML"
    )
    await state.set_state(BuyerStates.waiting_for_budget_max)


@router.message(BuyerStates.waiting_for_budget_max)
async def handle_budget_max(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –±—é–¥–∂–µ—Ç–∞"""
    try:
        budget_max = int(message.text.strip())
        if budget_max < 0:
            raise ValueError("Negative budget")
        if budget_max % 1000 != 0:
            await message.answer(
                "‚ùå <b>–ë—é–¥–∂–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫—Ä–∞—Ç–µ–Ω 1000</b>\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã: 5000, 10000, 15000\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
                parse_mode="HTML"
            )
            return
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ, –∫—Ä–∞—Ç–Ω–æ–µ 1000.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    data = await state.get_data()
    budget_min = data.get('budget_min', 0)
    
    if budget_max <= budget_min:
        await message.answer(
            f"‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç</b>\n\n"
            f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç ({budget_max}‚ÇΩ) –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –±–æ–ª—å—à–µ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ ({budget_min}‚ÇΩ).\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    await state.update_data(budget_max=budget_max)
    
    await message.answer(
        f"üìã <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏</b>\n\n"
        f"–£ –±–ª–æ–≥–µ—Ä–∞ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ—Ç–∑—ã–≤—ã –æ—Ç –¥—Ä—É–≥–∏—Ö –∑–∞–∫–∞–∑—á–∏–∫–æ–≤?",
        reply_markup=get_yes_no_keyboard(),
        parse_mode="HTML"
    )
    await state.set_state(BuyerStates.waiting_for_additional_criteria)


@router.callback_query(F.data.startswith("yes_no_"), BuyerStates.waiting_for_additional_criteria)
async def handle_additional_criteria(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤"""
    has_reviews = callback.data == "yes_no_yes"
    await state.update_data(has_reviews=has_reviews)
    
    await callback.answer()
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
    data = await state.get_data()
    
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–∏—Å–∫–∞
        platforms = [p.value for p in data.get('platforms', [])]
        categories = [c.value for c in data.get('categories', [])]
        
        results = await search_bloggers(
            platforms=platforms,
            categories=categories,
            target_age_min=data.get('target_age_min'),
            target_age_max=data.get('target_age_max'),
            target_gender=data.get('target_gender'),
            budget_min=data.get('budget_min'),
            budget_max=data.get('budget_max'),
            has_reviews=data.get('has_reviews'),
            limit=10
        )
        
        if not results:
            await callback.message.edit_text(
                "üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n"
                "üòî –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n"
                "‚Ä¢ –†–∞—Å—à–∏—Ä–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞\n"
                "‚Ä¢ –£–≤–µ–ª–∏—á–∏—Ç—å –±—é–¥–∂–µ—Ç\n"
                "‚Ä¢ –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏",
                parse_mode="HTML"
            )
            await state.clear()
            return
        
        await callback.message.edit_text(
            f"üîç <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ –±–ª–æ–≥–µ—Ä–æ–≤: {len(results)}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–≥–µ—Ä–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=get_search_results_keyboard(results),
            parse_mode="HTML"
        )
        await state.set_state(BuyerStates.viewing_results)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –±–ª–æ–≥–µ—Ä–æ–≤: {e}")
        await callback.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )
        await state.clear()


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ü–†–û–°–ú–û–¢–†–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í ===

@router.callback_query(F.data.startswith("blogger_"), BuyerStates.viewing_results)
async def handle_blogger_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –±–ª–æ–≥–µ—Ä–∞ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞"""
    blogger_id = int(callback.data.split("_")[1])
    
    blogger = await get_blogger(blogger_id)
    if not blogger:
        await callback.answer("‚ùå –ë–ª–æ–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–æ–≥–µ—Ä–µ
    info_text = f"üìù <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–ª–æ–≥–µ—Ä–µ</b>\n\n"
    info_text += f"üë§ <b>–ò–º—è:</b> {blogger.name}\n"
    info_text += f"üîó <b>–°—Å—ã–ª–∫–∞:</b> {blogger.url}\n"
    info_text += f"üì± <b>–ü–ª–∞—Ç—Ñ–æ—Ä–º—ã:</b> {blogger.get_platforms_summary()}\n\n"
    
    if blogger.subscribers_count:
        info_text += f"üìä <b>–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:</b> {blogger.subscribers_count:,}\n"
    if blogger.avg_views:
        info_text += f"üëÅÔ∏è <b>–°—Ä–µ–¥–Ω–∏–µ –ø—Ä–æ—Å–º–æ—Ç—Ä—ã:</b> {blogger.avg_views:,}\n"
    if blogger.avg_likes:
        info_text += f"‚ù§Ô∏è <b>–°—Ä–µ–¥–Ω–∏–µ –ª–∞–π–∫–∏:</b> {blogger.avg_likes:,}\n"
    if blogger.engagement_rate:
        info_text += f"üìà <b>–í–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç—å:</b> {blogger.engagement_rate:.1f}%\n"
    
    info_text += f"\nüë• <b>–î–µ–º–æ–≥—Ä–∞—Ñ–∏—è:</b>\n"
    info_text += f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {blogger.get_age_categories_summary()}\n"
    info_text += f"‚Ä¢ –ü–æ–ª: –ñ–µ–Ω—â–∏–Ω—ã {blogger.female_percent}%, –ú—É–∂—á–∏–Ω—ã {blogger.male_percent}%\n"
    
    info_text += f"\nüè∑Ô∏è <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {', '.join([cat.value for cat in blogger.categories])}\n"
    
    info_text += f"\nüí∞ <b>–¶–µ–Ω—ã:</b>\n"
    if blogger.price_stories:
        info_text += f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏–∏: {blogger.price_stories:,}‚ÇΩ\n"
    if blogger.price_post:
        info_text += f"‚Ä¢ –ü–æ—Å—Ç: {blogger.price_post:,}‚ÇΩ\n"
    if blogger.price_video:
        info_text += f"‚Ä¢ –í–∏–¥–µ–æ: {blogger.price_video:,}‚ÇΩ\n"
    
    info_text += f"\nüìã <b>–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:</b>\n"
    info_text += f"‚Ä¢ –û—Ç–∑—ã–≤—ã: {'‚úÖ' if blogger.has_reviews else '‚ùå'}\n"
    info_text += f"‚Ä¢ –†–ö–ù: {'‚úÖ' if blogger.is_registered_rkn else '‚ùå'}\n"
    info_text += f"‚Ä¢ –û—Ñ–∏—Ü. –æ–ø–ª–∞—Ç–∞: {'‚úÖ' if blogger.official_payment_possible else '‚ùå'}\n"
    
    if blogger.description:
        info_text += f"\nüìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{blogger.description}"
    
    await callback.answer()
    await callback.message.edit_text(
        info_text,
        reply_markup=get_blogger_selection_keyboard(blogger),
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("contact_"))
async def handle_contact_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –±–ª–æ–≥–µ—Ä–∞"""
    blogger_id = int(callback.data.split("_")[1])
    
    user = await get_user(callback.from_user.id)
    if not user or not user.has_role(UserRole.BUYER):
        await callback.answer("‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω")
        return
    
    blogger = await get_blogger(blogger_id)
    if not blogger:
        await callback.answer("‚ùå –ë–ª–æ–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø—Ä–æ–¥–∞–≤—Ü–∞
    # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.answer("‚úÖ –ó–∞–ø—Ä–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    await callback.message.edit_text(
        f"üìû <b>–ó–∞–ø—Ä–æ—Å –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤</b>\n\n"
        f"–í–∞—à –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –±–ª–æ–≥–µ—Ä–∞ <b>{blogger.name}</b> –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.\n\n"
        f"–ü—Ä–æ–¥–∞–≤–µ—Ü —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        f"üí° <b>–°–æ–≤–µ—Ç:</b> –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ —á–µ—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –ø—Ä–æ–µ–∫—Ç.",
        parse_mode="HTML"
    )


@router.callback_query(F.data.startswith("complain_"))
async def handle_complaint_request(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∂–∞–ª–æ–±—É"""
    blogger_id = int(callback.data.split("_")[1])
    
    user = await get_user(callback.from_user.id)
    if not user or not user.can_complain():
        await callback.answer("‚ùå –¢–æ–ª—å–∫–æ –∑–∞–∫—É–ø—â–∏–∫–∏ –º–æ–≥—É—Ç –ø–æ–¥–∞–≤–∞—Ç—å –∂–∞–ª–æ–±—ã")
        return
    
    blogger = await get_blogger(blogger_id)
    if not blogger:
        await callback.answer("‚ùå –ë–ª–æ–≥–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await state.update_data(complaint_blogger_id=blogger_id, complaint_blogger_name=blogger.name)
    
    await callback.answer()
    await callback.message.edit_text(
        f"‚ö†Ô∏è <b>–ü–æ–¥–∞—á–∞ –∂–∞–ª–æ–±—ã</b>\n\n"
        f"–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å –ø–æ–¥–∞—Ç—å –∂–∞–ª–æ–±—É –Ω–∞ –±–ª–æ–≥–µ—Ä–∞ <b>{blogger.name}</b>.\n\n"
        f"–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã:",
        parse_mode="HTML"
    )
    await state.set_state(ComplaintStates.waiting_for_reason)


@router.message(ComplaintStates.waiting_for_reason)
async def handle_complaint_reason(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—á–∏–Ω—ã –∂–∞–ª–æ–±—ã"""
    reason = message.text.strip()
    
    if len(reason) < 10:
        await message.answer(
            "‚ùå <b>–°–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</b>\n\n"
            "–û–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –∂–∞–ª–æ–±—ã –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤).\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:",
            parse_mode="HTML"
        )
        return
    
    data = await state.get_data()
    blogger_id = data.get('complaint_blogger_id')
    blogger_name = data.get('complaint_blogger_name')
    
    user = await get_user(message.from_user.id)
    
    try:
        success = await create_complaint(
            blogger_id=blogger_id,
            blogger_name=blogger_name,
            user_id=user.id,
            username=user.username or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            reason=reason
        )
        
        if success:
            await message.answer(
                f"‚úÖ <b>–ñ–∞–ª–æ–±–∞ –ø–æ–¥–∞–Ω–∞</b>\n\n"
                f"–í–∞—à–∞ –∂–∞–ª–æ–±–∞ –Ω–∞ –±–ª–æ–≥–µ—Ä–∞ <b>{blogger_name}</b> –ø—Ä–∏–Ω—è—Ç–∞.\n\n"
                f"–ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ—ë –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                parse_mode="HTML"
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤ Google Sheets
            await log_complaint_to_sheets(user, blogger_name, reason)
        else:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∂–∞–ª–æ–±—ã</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∂–∞–ª–æ–±—É.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
                parse_mode="HTML"
            )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∂–∞–ª–æ–±—ã: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∞—á–µ –∂–∞–ª–æ–±—ã</b>\n\n"
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∂–∞–ª–æ–±—ã.\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.",
            parse_mode="HTML"
        )
    
    await state.clear()


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def get_platform_selection_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º –¥–ª—è –ø–æ–∏—Å–∫–∞"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üì± Instagram", callback_data="platform_instagram")],
        [InlineKeyboardButton(text="üì∫ YouTube", callback_data="platform_youtube")],
        [InlineKeyboardButton(text="üì± TikTok", callback_data="platform_tiktok")],
        [InlineKeyboardButton(text="üì± Telegram", callback_data="platform_telegram")],
        [InlineKeyboardButton(text="üì± VK", callback_data="platform_vk")],
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –≤—ã–±–æ—Ä", callback_data="confirm_platforms")]
    ])


def get_gender_selection_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞"""
    from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
    
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë© –ñ–µ–Ω—â–∏–Ω—ã", callback_data="gender_female")],
        [InlineKeyboardButton(text="üë® –ú—É–∂—á–∏–Ω—ã", callback_data="gender_male")],
        [InlineKeyboardButton(text="üë• –õ—é–±–æ–π", callback_data="gender_any")]
    ])


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID
async def get_user_by_id(user_id: int):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–º—É ID"""
    # –≠—Ç—É —Ñ—É–Ω–∫—Ü–∏—é –Ω—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ database.py
    import aiosqlite
    from database.database import DATABASE_PATH
    from database.models import User, UserRole, SubscriptionStatus
    from datetime import datetime
    
    async with aiosqlite.connect(DATABASE_PATH) as db:
        db.row_factory = aiosqlite.Row
        cursor = await db.execute(
            "SELECT * FROM users WHERE id = ?", (user_id,)
        )
        row = await cursor.fetchone()
        
        if row:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor = await db.execute("""
                SELECT role FROM user_roles WHERE user_id = ?
            """, (row['id'],))
            
            role_rows = await cursor.fetchall()
            roles = {UserRole(role_row['role']) for role_row in role_rows}
            
            return User(
                id=row['id'],
                telegram_id=row['telegram_id'],
                username=row['username'],
                first_name=row['first_name'],
                last_name=row['last_name'],
                roles=roles,
                subscription_status=SubscriptionStatus(row['subscription_status']) if row['subscription_status'] else SubscriptionStatus.INACTIVE,
                subscription_end_date=datetime.fromisoformat(row['subscription_end_date']) if row['subscription_end_date'] else None,
                subscription_start_date=datetime.fromisoformat(row['subscription_start_date']) if row['subscription_start_date'] else None,
                rating=row['rating'],
                reviews_count=row['reviews_count'],
                is_vip=bool(row['is_vip']),
                penalty_amount=row['penalty_amount'],
                is_blocked=bool(row['is_blocked']),
                created_at=datetime.fromisoformat(row['created_at']) if row['created_at'] else datetime.now(),
                updated_at=datetime.fromisoformat(row['updated_at']) if row['updated_at'] else datetime.now()
            )
        return None 